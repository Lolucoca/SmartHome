
AVRLoRaDevBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00806000  00000a1e  00000ab2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ba  00806008  00806008  00000aba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000aec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046e4  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003608  00000000  00000000  00005354  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f88  00000000  00000000  0000895c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  000098e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a36  00000000  00000000  00009b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006da  00000000  00000000  0000b5a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000bc7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
   8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
   c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  10:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  14:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  18:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  1c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  20:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  24:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  28:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  30:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  38:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  3c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  40:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  44:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  48:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  4c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  50:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  54:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  58:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  5c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  60:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  64:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  68:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  6c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  70:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  74:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  78:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  7c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  80:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  84:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  88:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  8c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  90:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  94:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  98:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  9c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  a0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  a4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  a8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  ac:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  b0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  b4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  b8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  bc:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  c0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  c4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  c8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  cc:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  d0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  d4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  d8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  dc:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  e0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  e4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  e8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  ec:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  f0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e6       	ldi	r17, 0x60	; 96
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e6       	ldi	r27, 0x60	; 96
 106:	ee e1       	ldi	r30, 0x1E	; 30
 108:	fa e0       	ldi	r31, 0x0A	; 10
 10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x10>
 10c:	05 90       	lpm	r0, Z+
 10e:	0d 92       	st	X+, r0
 110:	a8 30       	cpi	r26, 0x08	; 8
 112:	b1 07       	cpc	r27, r17
 114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0xc>

00000116 <__do_clear_bss>:
 116:	20 e6       	ldi	r18, 0x60	; 96
 118:	a8 e0       	ldi	r26, 0x08	; 8
 11a:	b0 e6       	ldi	r27, 0x60	; 96
 11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
 11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
 120:	a2 3c       	cpi	r26, 0xC2	; 194
 122:	b2 07       	cpc	r27, r18
 124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
 126:	0e 94 c4 02 	call	0x588	; 0x588 <main>
 12a:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <_exit>

0000012e <__bad_interrupt>:
 12e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000132 <initializeAVR>:


void initializeAVR(){
	
	//Disable the Clock prescaler
	CLKCTRL_MCLKCTRLA = 0x00;
 132:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
	//Set the Clock prescaler register to 0 (no division)
	CLKCTRL_MCLKCTRLB = 0x00;
 136:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f0061>
	//Disable Configuration Change Protection
	CCP = 0xD8;
 13a:	88 ed       	ldi	r24, 0xD8	; 216
 13c:	84 bf       	out	0x34, r24	; 52
	//Set the Internal Oscillator to 24MHz
	CLKCTRL_OSCHFCTRLA = 0x26; 
 13e:	86 e2       	ldi	r24, 0x26	; 38
 140:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f0068>
	
	LED0 = (GPIO) {0b00000001, (volatile u8 *) &PORTA};
 144:	e9 eb       	ldi	r30, 0xB9	; 185
 146:	f0 e6       	ldi	r31, 0x60	; 96
 148:	71 e0       	ldi	r23, 0x01	; 1
 14a:	70 83       	st	Z, r23
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	94 e0       	ldi	r25, 0x04	; 4
 150:	81 83       	std	Z+1, r24	; 0x01
 152:	92 83       	std	Z+2, r25	; 0x02
	LED1 = (GPIO) {0b00000010, (volatile u8 *) &PORTA};
 154:	e0 e5       	ldi	r30, 0x50	; 80
 156:	f0 e6       	ldi	r31, 0x60	; 96
 158:	62 e0       	ldi	r22, 0x02	; 2
 15a:	60 83       	st	Z, r22
 15c:	81 83       	std	Z+1, r24	; 0x01
 15e:	92 83       	std	Z+2, r25	; 0x02
	LED2 = (GPIO) {0b00000100, (volatile u8 *) &PORTA};
 160:	e8 e9       	ldi	r30, 0x98	; 152
 162:	f0 e6       	ldi	r31, 0x60	; 96
 164:	54 e0       	ldi	r21, 0x04	; 4
 166:	50 83       	st	Z, r21
 168:	81 83       	std	Z+1, r24	; 0x01
 16a:	92 83       	std	Z+2, r25	; 0x02
	LED3 = (GPIO) {0b00001000, (volatile u8 *) &PORTA};
 16c:	ed e7       	ldi	r30, 0x7D	; 125
 16e:	f0 e6       	ldi	r31, 0x60	; 96
 170:	38 e0       	ldi	r19, 0x08	; 8
 172:	30 83       	st	Z, r19
 174:	81 83       	std	Z+1, r24	; 0x01
 176:	92 83       	std	Z+2, r25	; 0x02
	LED4 = (GPIO) {0b00010000, (volatile u8 *) &PORTA};
 178:	e3 eb       	ldi	r30, 0xB3	; 179
 17a:	f0 e6       	ldi	r31, 0x60	; 96
 17c:	20 e1       	ldi	r18, 0x10	; 16
 17e:	20 83       	st	Z, r18
 180:	81 83       	std	Z+1, r24	; 0x01
 182:	92 83       	std	Z+2, r25	; 0x02
	LED5 = (GPIO) {0b00100000, (volatile u8 *) &PORTA};
 184:	e7 ea       	ldi	r30, 0xA7	; 167
 186:	f0 e6       	ldi	r31, 0x60	; 96
 188:	40 e2       	ldi	r20, 0x20	; 32
 18a:	40 83       	st	Z, r20
 18c:	81 83       	std	Z+1, r24	; 0x01
 18e:	92 83       	std	Z+2, r25	; 0x02
	LED6 = (GPIO) {0b01000000, (volatile u8 *) &PORTA};
 190:	a4 e4       	ldi	r26, 0x44	; 68
 192:	b0 e6       	ldi	r27, 0x60	; 96
 194:	f0 e4       	ldi	r31, 0x40	; 64
 196:	fc 93       	st	X, r31
 198:	11 96       	adiw	r26, 0x01	; 1
 19a:	8d 93       	st	X+, r24
 19c:	9c 93       	st	X, r25
 19e:	12 97       	sbiw	r26, 0x02	; 2
	LED7 = (GPIO) {0b10000000, (volatile u8 *) &PORTA};
 1a0:	af e8       	ldi	r26, 0x8F	; 143
 1a2:	b0 e6       	ldi	r27, 0x60	; 96
 1a4:	e0 e8       	ldi	r30, 0x80	; 128
 1a6:	ec 93       	st	X, r30
 1a8:	11 96       	adiw	r26, 0x01	; 1
 1aa:	8d 93       	st	X+, r24
 1ac:	9c 93       	st	X, r25
 1ae:	12 97       	sbiw	r26, 0x02	; 2
		
	RFM_RST = (GPIO) {0b00010000, (volatile u8 *) &PORTB};
 1b0:	a3 e8       	ldi	r26, 0x83	; 131
 1b2:	b0 e6       	ldi	r27, 0x60	; 96
 1b4:	2c 93       	st	X, r18
 1b6:	80 e2       	ldi	r24, 0x20	; 32
 1b8:	94 e0       	ldi	r25, 0x04	; 4
 1ba:	11 96       	adiw	r26, 0x01	; 1
 1bc:	8d 93       	st	X+, r24
 1be:	9c 93       	st	X, r25
 1c0:	12 97       	sbiw	r26, 0x02	; 2
		
	GPIO0 = (GPIO) {0b00000001, (volatile u8 *) &PORTC};
 1c2:	a6 e8       	ldi	r26, 0x86	; 134
 1c4:	b0 e6       	ldi	r27, 0x60	; 96
 1c6:	7c 93       	st	X, r23
 1c8:	80 e4       	ldi	r24, 0x40	; 64
 1ca:	94 e0       	ldi	r25, 0x04	; 4
 1cc:	11 96       	adiw	r26, 0x01	; 1
 1ce:	8d 93       	st	X+, r24
 1d0:	9c 93       	st	X, r25
 1d2:	12 97       	sbiw	r26, 0x02	; 2
	GPIO1 = (GPIO) {0b00000010, (volatile u8 *) &PORTC};
 1d4:	a1 e4       	ldi	r26, 0x41	; 65
 1d6:	b0 e6       	ldi	r27, 0x60	; 96
 1d8:	6c 93       	st	X, r22
 1da:	11 96       	adiw	r26, 0x01	; 1
 1dc:	8d 93       	st	X+, r24
 1de:	9c 93       	st	X, r25
 1e0:	12 97       	sbiw	r26, 0x02	; 2
	GPIO2 = (GPIO) {0b00000100, (volatile u8 *) &PORTC};
 1e2:	ad ea       	ldi	r26, 0xAD	; 173
 1e4:	b0 e6       	ldi	r27, 0x60	; 96
 1e6:	5c 93       	st	X, r21
 1e8:	11 96       	adiw	r26, 0x01	; 1
 1ea:	8d 93       	st	X+, r24
 1ec:	9c 93       	st	X, r25
 1ee:	12 97       	sbiw	r26, 0x02	; 2
	GPIO3 = (GPIO) {0b00001000, (volatile u8 *) &PORTC};
 1f0:	ad e4       	ldi	r26, 0x4D	; 77
 1f2:	b0 e6       	ldi	r27, 0x60	; 96
 1f4:	3c 93       	st	X, r19
 1f6:	11 96       	adiw	r26, 0x01	; 1
 1f8:	8d 93       	st	X+, r24
 1fa:	9c 93       	st	X, r25
 1fc:	12 97       	sbiw	r26, 0x02	; 2
	GPIO4 = (GPIO) {0b00010000, (volatile u8 *) &PORTC};
 1fe:	ab e0       	ldi	r26, 0x0B	; 11
 200:	b0 e6       	ldi	r27, 0x60	; 96
 202:	2c 93       	st	X, r18
 204:	11 96       	adiw	r26, 0x01	; 1
 206:	8d 93       	st	X+, r24
 208:	9c 93       	st	X, r25
 20a:	12 97       	sbiw	r26, 0x02	; 2
	GPIO5 = (GPIO) {0b00100000, (volatile u8 *) &PORTC};
 20c:	ac eb       	ldi	r26, 0xBC	; 188
 20e:	b0 e6       	ldi	r27, 0x60	; 96
 210:	4c 93       	st	X, r20
 212:	11 96       	adiw	r26, 0x01	; 1
 214:	8d 93       	st	X+, r24
 216:	9c 93       	st	X, r25
 218:	12 97       	sbiw	r26, 0x02	; 2
	GPIO6 = (GPIO) {0b01000000, (volatile u8 *) &PORTC};
 21a:	a2 e9       	ldi	r26, 0x92	; 146
 21c:	b0 e6       	ldi	r27, 0x60	; 96
 21e:	fc 93       	st	X, r31
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 93       	st	X+, r24
 224:	9c 93       	st	X, r25
 226:	12 97       	sbiw	r26, 0x02	; 2
	GPIO7 = (GPIO) {0b10000000, (volatile u8 *) &PORTC};
 228:	a0 eb       	ldi	r26, 0xB0	; 176
 22a:	b0 e6       	ldi	r27, 0x60	; 96
 22c:	ec 93       	st	X, r30
 22e:	11 96       	adiw	r26, 0x01	; 1
 230:	8d 93       	st	X+, r24
 232:	9c 93       	st	X, r25
 234:	12 97       	sbiw	r26, 0x02	; 2
		
	GPIO8 = (GPIO) {0b00000001, (volatile u8 *) &PORTD};
 236:	a6 eb       	ldi	r26, 0xB6	; 182
 238:	b0 e6       	ldi	r27, 0x60	; 96
 23a:	7c 93       	st	X, r23
 23c:	80 e6       	ldi	r24, 0x60	; 96
 23e:	94 e0       	ldi	r25, 0x04	; 4
 240:	11 96       	adiw	r26, 0x01	; 1
 242:	8d 93       	st	X+, r24
 244:	9c 93       	st	X, r25
 246:	12 97       	sbiw	r26, 0x02	; 2
	GPIO9 = (GPIO) {0b00000010, (volatile u8 *) &PORTD};
 248:	ab e9       	ldi	r26, 0x9B	; 155
 24a:	b0 e6       	ldi	r27, 0x60	; 96
 24c:	6c 93       	st	X, r22
 24e:	11 96       	adiw	r26, 0x01	; 1
 250:	8d 93       	st	X+, r24
 252:	9c 93       	st	X, r25
 254:	12 97       	sbiw	r26, 0x02	; 2
	GPIO10 = (GPIO) {0b00000100, (volatile u8 *) &PORTD};
 256:	a4 ea       	ldi	r26, 0xA4	; 164
 258:	b0 e6       	ldi	r27, 0x60	; 96
 25a:	5c 93       	st	X, r21
 25c:	11 96       	adiw	r26, 0x01	; 1
 25e:	8d 93       	st	X+, r24
 260:	9c 93       	st	X, r25
 262:	12 97       	sbiw	r26, 0x02	; 2
	GPIO11 = (GPIO) {0b00001000, (volatile u8 *) &PORTD};
 264:	a0 e8       	ldi	r26, 0x80	; 128
 266:	b0 e6       	ldi	r27, 0x60	; 96
 268:	3c 93       	st	X, r19
 26a:	11 96       	adiw	r26, 0x01	; 1
 26c:	8d 93       	st	X+, r24
 26e:	9c 93       	st	X, r25
 270:	12 97       	sbiw	r26, 0x02	; 2
	GPIO12 = (GPIO) {0b00010000, (volatile u8 *) &PORTD};
 272:	ae e3       	ldi	r26, 0x3E	; 62
 274:	b0 e6       	ldi	r27, 0x60	; 96
 276:	2c 93       	st	X, r18
 278:	11 96       	adiw	r26, 0x01	; 1
 27a:	8d 93       	st	X+, r24
 27c:	9c 93       	st	X, r25
 27e:	12 97       	sbiw	r26, 0x02	; 2
	GPIO13 = (GPIO) {0b00100000, (volatile u8 *) &PORTD};
 280:	a5 e9       	ldi	r26, 0x95	; 149
 282:	b0 e6       	ldi	r27, 0x60	; 96
 284:	4c 93       	st	X, r20
 286:	11 96       	adiw	r26, 0x01	; 1
 288:	8d 93       	st	X+, r24
 28a:	9c 93       	st	X, r25
 28c:	12 97       	sbiw	r26, 0x02	; 2
	GPIO14 = (GPIO) {0b01000000, (volatile u8 *) &PORTD};
 28e:	a8 e0       	ldi	r26, 0x08	; 8
 290:	b0 e6       	ldi	r27, 0x60	; 96
 292:	fc 93       	st	X, r31
 294:	11 96       	adiw	r26, 0x01	; 1
 296:	8d 93       	st	X+, r24
 298:	9c 93       	st	X, r25
 29a:	12 97       	sbiw	r26, 0x02	; 2
	GPIO15 = (GPIO) {0b10000000, (volatile u8 *) &PORTD};
 29c:	a1 ea       	ldi	r26, 0xA1	; 161
 29e:	b0 e6       	ldi	r27, 0x60	; 96
 2a0:	ec 93       	st	X, r30
 2a2:	11 96       	adiw	r26, 0x01	; 1
 2a4:	8d 93       	st	X+, r24
 2a6:	9c 93       	st	X, r25
 2a8:	12 97       	sbiw	r26, 0x02	; 2
	
	RFM_SS = (GPIO) {0b00001000, (volatile u8 *) &PORTE};
 2aa:	ee e9       	ldi	r30, 0x9E	; 158
 2ac:	f0 e6       	ldi	r31, 0x60	; 96
 2ae:	30 83       	st	Z, r19
 2b0:	80 e8       	ldi	r24, 0x80	; 128
 2b2:	94 e0       	ldi	r25, 0x04	; 4
 2b4:	81 83       	std	Z+1, r24	; 0x01
 2b6:	92 83       	std	Z+2, r25	; 0x02
		
	DIO0 = (GPIO) {0b00000001, (volatile u8 *) &PORTF};
 2b8:	e7 e4       	ldi	r30, 0x47	; 71
 2ba:	f0 e6       	ldi	r31, 0x60	; 96
 2bc:	70 83       	st	Z, r23
 2be:	80 ea       	ldi	r24, 0xA0	; 160
 2c0:	94 e0       	ldi	r25, 0x04	; 4
 2c2:	81 83       	std	Z+1, r24	; 0x01
 2c4:	92 83       	std	Z+2, r25	; 0x02
	DIO1 = (GPIO) {0b00000010, (volatile u8 *) &PORTF};
 2c6:	e9 e8       	ldi	r30, 0x89	; 137
 2c8:	f0 e6       	ldi	r31, 0x60	; 96
 2ca:	60 83       	st	Z, r22
 2cc:	81 83       	std	Z+1, r24	; 0x01
 2ce:	92 83       	std	Z+2, r25	; 0x02
	DIO2 = (GPIO) {0b00000100, (volatile u8 *) &PORTF};
 2d0:	ec e8       	ldi	r30, 0x8C	; 140
 2d2:	f0 e6       	ldi	r31, 0x60	; 96
 2d4:	50 83       	st	Z, r21
 2d6:	81 83       	std	Z+1, r24	; 0x01
 2d8:	92 83       	std	Z+2, r25	; 0x02
	DIO3 = (GPIO) {0b00001000, (volatile u8 *) &PORTF};
 2da:	ef eb       	ldi	r30, 0xBF	; 191
 2dc:	f0 e6       	ldi	r31, 0x60	; 96
 2de:	30 83       	st	Z, r19
 2e0:	81 83       	std	Z+1, r24	; 0x01
 2e2:	92 83       	std	Z+2, r25	; 0x02
	DIO4 = (GPIO) {0b00010000, (volatile u8 *) &PORTF};
 2e4:	ea ea       	ldi	r30, 0xAA	; 170
 2e6:	f0 e6       	ldi	r31, 0x60	; 96
 2e8:	20 83       	st	Z, r18
 2ea:	81 83       	std	Z+1, r24	; 0x01
 2ec:	92 83       	std	Z+2, r25	; 0x02
	DIO5 = (GPIO) {0b00100000, (volatile u8 *) &PORTF};
 2ee:	ea e4       	ldi	r30, 0x4A	; 74
 2f0:	f0 e6       	ldi	r31, 0x60	; 96
 2f2:	40 83       	st	Z, r20
 2f4:	81 83       	std	Z+1, r24	; 0x01
 2f6:	92 83       	std	Z+2, r25	; 0x02
		
		
	LEDs[0] = LED0;
 2f8:	e3 e5       	ldi	r30, 0x53	; 83
 2fa:	f0 e6       	ldi	r31, 0x60	; 96
 2fc:	80 91 b9 60 	lds	r24, 0x60B9	; 0x8060b9 <LED0>
 300:	90 91 ba 60 	lds	r25, 0x60BA	; 0x8060ba <LED0+0x1>
 304:	a0 91 bb 60 	lds	r26, 0x60BB	; 0x8060bb <LED0+0x2>
 308:	80 83       	st	Z, r24
 30a:	91 83       	std	Z+1, r25	; 0x01
 30c:	a2 83       	std	Z+2, r26	; 0x02
	LEDs[1] = LED1;
 30e:	80 91 50 60 	lds	r24, 0x6050	; 0x806050 <LED1>
 312:	90 91 51 60 	lds	r25, 0x6051	; 0x806051 <LED1+0x1>
 316:	a0 91 52 60 	lds	r26, 0x6052	; 0x806052 <LED1+0x2>
 31a:	83 83       	std	Z+3, r24	; 0x03
 31c:	94 83       	std	Z+4, r25	; 0x04
 31e:	a5 83       	std	Z+5, r26	; 0x05
	LEDs[2] = LED2;
 320:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <LED2>
 324:	90 91 99 60 	lds	r25, 0x6099	; 0x806099 <LED2+0x1>
 328:	a0 91 9a 60 	lds	r26, 0x609A	; 0x80609a <LED2+0x2>
 32c:	86 83       	std	Z+6, r24	; 0x06
 32e:	97 83       	std	Z+7, r25	; 0x07
 330:	a0 87       	std	Z+8, r26	; 0x08
	LEDs[3] = LED3;
 332:	80 91 7d 60 	lds	r24, 0x607D	; 0x80607d <LED3>
 336:	90 91 7e 60 	lds	r25, 0x607E	; 0x80607e <LED3+0x1>
 33a:	a0 91 7f 60 	lds	r26, 0x607F	; 0x80607f <LED3+0x2>
 33e:	81 87       	std	Z+9, r24	; 0x09
 340:	92 87       	std	Z+10, r25	; 0x0a
 342:	a3 87       	std	Z+11, r26	; 0x0b
	LEDs[4] = LED4;
 344:	80 91 b3 60 	lds	r24, 0x60B3	; 0x8060b3 <LED4>
 348:	90 91 b4 60 	lds	r25, 0x60B4	; 0x8060b4 <LED4+0x1>
 34c:	a0 91 b5 60 	lds	r26, 0x60B5	; 0x8060b5 <LED4+0x2>
 350:	84 87       	std	Z+12, r24	; 0x0c
 352:	95 87       	std	Z+13, r25	; 0x0d
 354:	a6 87       	std	Z+14, r26	; 0x0e
	LEDs[5] = LED5;
 356:	80 91 a7 60 	lds	r24, 0x60A7	; 0x8060a7 <LED5>
 35a:	90 91 a8 60 	lds	r25, 0x60A8	; 0x8060a8 <LED5+0x1>
 35e:	a0 91 a9 60 	lds	r26, 0x60A9	; 0x8060a9 <LED5+0x2>
 362:	87 87       	std	Z+15, r24	; 0x0f
 364:	90 8b       	std	Z+16, r25	; 0x10
 366:	a1 8b       	std	Z+17, r26	; 0x11
	LEDs[6] = LED6;
 368:	80 91 44 60 	lds	r24, 0x6044	; 0x806044 <LED6>
 36c:	90 91 45 60 	lds	r25, 0x6045	; 0x806045 <LED6+0x1>
 370:	a0 91 46 60 	lds	r26, 0x6046	; 0x806046 <LED6+0x2>
 374:	82 8b       	std	Z+18, r24	; 0x12
 376:	93 8b       	std	Z+19, r25	; 0x13
 378:	a4 8b       	std	Z+20, r26	; 0x14
	LEDs[7] = LED7;
 37a:	80 91 8f 60 	lds	r24, 0x608F	; 0x80608f <LED7>
 37e:	90 91 90 60 	lds	r25, 0x6090	; 0x806090 <LED7+0x1>
 382:	a0 91 91 60 	lds	r26, 0x6091	; 0x806091 <LED7+0x2>
 386:	85 8b       	std	Z+21, r24	; 0x15
 388:	96 8b       	std	Z+22, r25	; 0x16
 38a:	a7 8b       	std	Z+23, r26	; 0x17
	
	GPIOs[0] = GPIO0;
 38c:	ee e0       	ldi	r30, 0x0E	; 14
 38e:	f0 e6       	ldi	r31, 0x60	; 96
 390:	80 91 86 60 	lds	r24, 0x6086	; 0x806086 <GPIO0>
 394:	90 91 87 60 	lds	r25, 0x6087	; 0x806087 <GPIO0+0x1>
 398:	a0 91 88 60 	lds	r26, 0x6088	; 0x806088 <GPIO0+0x2>
 39c:	80 83       	st	Z, r24
 39e:	91 83       	std	Z+1, r25	; 0x01
 3a0:	a2 83       	std	Z+2, r26	; 0x02
	GPIOs[1] = GPIO1;
 3a2:	80 91 41 60 	lds	r24, 0x6041	; 0x806041 <GPIO1>
 3a6:	90 91 42 60 	lds	r25, 0x6042	; 0x806042 <GPIO1+0x1>
 3aa:	a0 91 43 60 	lds	r26, 0x6043	; 0x806043 <GPIO1+0x2>
 3ae:	83 83       	std	Z+3, r24	; 0x03
 3b0:	94 83       	std	Z+4, r25	; 0x04
 3b2:	a5 83       	std	Z+5, r26	; 0x05
	GPIOs[2] = GPIO2;
 3b4:	80 91 ad 60 	lds	r24, 0x60AD	; 0x8060ad <GPIO2>
 3b8:	90 91 ae 60 	lds	r25, 0x60AE	; 0x8060ae <GPIO2+0x1>
 3bc:	a0 91 af 60 	lds	r26, 0x60AF	; 0x8060af <GPIO2+0x2>
 3c0:	86 83       	std	Z+6, r24	; 0x06
 3c2:	97 83       	std	Z+7, r25	; 0x07
 3c4:	a0 87       	std	Z+8, r26	; 0x08
	GPIOs[3] = GPIO3;
 3c6:	80 91 4d 60 	lds	r24, 0x604D	; 0x80604d <GPIO3>
 3ca:	90 91 4e 60 	lds	r25, 0x604E	; 0x80604e <GPIO3+0x1>
 3ce:	a0 91 4f 60 	lds	r26, 0x604F	; 0x80604f <GPIO3+0x2>
 3d2:	81 87       	std	Z+9, r24	; 0x09
 3d4:	92 87       	std	Z+10, r25	; 0x0a
 3d6:	a3 87       	std	Z+11, r26	; 0x0b
	GPIOs[4] = GPIO4;
 3d8:	80 91 0b 60 	lds	r24, 0x600B	; 0x80600b <GPIO4>
 3dc:	90 91 0c 60 	lds	r25, 0x600C	; 0x80600c <GPIO4+0x1>
 3e0:	a0 91 0d 60 	lds	r26, 0x600D	; 0x80600d <GPIO4+0x2>
 3e4:	84 87       	std	Z+12, r24	; 0x0c
 3e6:	95 87       	std	Z+13, r25	; 0x0d
 3e8:	a6 87       	std	Z+14, r26	; 0x0e
	GPIOs[5] = GPIO5;
 3ea:	80 91 bc 60 	lds	r24, 0x60BC	; 0x8060bc <GPIO5>
 3ee:	90 91 bd 60 	lds	r25, 0x60BD	; 0x8060bd <GPIO5+0x1>
 3f2:	a0 91 be 60 	lds	r26, 0x60BE	; 0x8060be <GPIO5+0x2>
 3f6:	87 87       	std	Z+15, r24	; 0x0f
 3f8:	90 8b       	std	Z+16, r25	; 0x10
 3fa:	a1 8b       	std	Z+17, r26	; 0x11
	GPIOs[6] = GPIO6;
 3fc:	80 91 92 60 	lds	r24, 0x6092	; 0x806092 <GPIO6>
 400:	90 91 93 60 	lds	r25, 0x6093	; 0x806093 <GPIO6+0x1>
 404:	a0 91 94 60 	lds	r26, 0x6094	; 0x806094 <GPIO6+0x2>
 408:	82 8b       	std	Z+18, r24	; 0x12
 40a:	93 8b       	std	Z+19, r25	; 0x13
 40c:	a4 8b       	std	Z+20, r26	; 0x14
	GPIOs[7] = GPIO7;
 40e:	80 91 b0 60 	lds	r24, 0x60B0	; 0x8060b0 <GPIO7>
 412:	90 91 b1 60 	lds	r25, 0x60B1	; 0x8060b1 <GPIO7+0x1>
 416:	a0 91 b2 60 	lds	r26, 0x60B2	; 0x8060b2 <GPIO7+0x2>
 41a:	85 8b       	std	Z+21, r24	; 0x15
 41c:	96 8b       	std	Z+22, r25	; 0x16
 41e:	a7 8b       	std	Z+23, r26	; 0x17
	
	GPIOs[8] = GPIO8;
 420:	80 91 b6 60 	lds	r24, 0x60B6	; 0x8060b6 <GPIO8>
 424:	90 91 b7 60 	lds	r25, 0x60B7	; 0x8060b7 <GPIO8+0x1>
 428:	a0 91 b8 60 	lds	r26, 0x60B8	; 0x8060b8 <GPIO8+0x2>
 42c:	80 8f       	std	Z+24, r24	; 0x18
 42e:	91 8f       	std	Z+25, r25	; 0x19
 430:	a2 8f       	std	Z+26, r26	; 0x1a
	GPIOs[9] = GPIO9;
 432:	80 91 9b 60 	lds	r24, 0x609B	; 0x80609b <GPIO9>
 436:	90 91 9c 60 	lds	r25, 0x609C	; 0x80609c <GPIO9+0x1>
 43a:	a0 91 9d 60 	lds	r26, 0x609D	; 0x80609d <GPIO9+0x2>
 43e:	83 8f       	std	Z+27, r24	; 0x1b
 440:	94 8f       	std	Z+28, r25	; 0x1c
 442:	a5 8f       	std	Z+29, r26	; 0x1d
	GPIOs[10] = GPIO10;
 444:	80 91 a4 60 	lds	r24, 0x60A4	; 0x8060a4 <GPIO10>
 448:	90 91 a5 60 	lds	r25, 0x60A5	; 0x8060a5 <GPIO10+0x1>
 44c:	a0 91 a6 60 	lds	r26, 0x60A6	; 0x8060a6 <GPIO10+0x2>
 450:	86 8f       	std	Z+30, r24	; 0x1e
 452:	97 8f       	std	Z+31, r25	; 0x1f
 454:	a0 a3       	std	Z+32, r26	; 0x20
	GPIOs[11] = GPIO11;
 456:	80 91 80 60 	lds	r24, 0x6080	; 0x806080 <GPIO11>
 45a:	90 91 81 60 	lds	r25, 0x6081	; 0x806081 <GPIO11+0x1>
 45e:	a0 91 82 60 	lds	r26, 0x6082	; 0x806082 <GPIO11+0x2>
 462:	81 a3       	std	Z+33, r24	; 0x21
 464:	92 a3       	std	Z+34, r25	; 0x22
 466:	a3 a3       	std	Z+35, r26	; 0x23
	GPIOs[12] = GPIO12;
 468:	80 91 3e 60 	lds	r24, 0x603E	; 0x80603e <GPIO12>
 46c:	90 91 3f 60 	lds	r25, 0x603F	; 0x80603f <GPIO12+0x1>
 470:	a0 91 40 60 	lds	r26, 0x6040	; 0x806040 <GPIO12+0x2>
 474:	84 a3       	std	Z+36, r24	; 0x24
 476:	95 a3       	std	Z+37, r25	; 0x25
 478:	a6 a3       	std	Z+38, r26	; 0x26
	GPIOs[13] = GPIO13;
 47a:	80 91 95 60 	lds	r24, 0x6095	; 0x806095 <GPIO13>
 47e:	90 91 96 60 	lds	r25, 0x6096	; 0x806096 <GPIO13+0x1>
 482:	a0 91 97 60 	lds	r26, 0x6097	; 0x806097 <GPIO13+0x2>
 486:	87 a3       	std	Z+39, r24	; 0x27
 488:	90 a7       	std	Z+40, r25	; 0x28
 48a:	a1 a7       	std	Z+41, r26	; 0x29
	GPIOs[14] = GPIO14;
 48c:	80 91 08 60 	lds	r24, 0x6008	; 0x806008 <__data_end>
 490:	90 91 09 60 	lds	r25, 0x6009	; 0x806009 <__data_end+0x1>
 494:	a0 91 0a 60 	lds	r26, 0x600A	; 0x80600a <__data_end+0x2>
 498:	82 a7       	std	Z+42, r24	; 0x2a
 49a:	93 a7       	std	Z+43, r25	; 0x2b
 49c:	a4 a7       	std	Z+44, r26	; 0x2c
	GPIOs[15] = GPIO15;
 49e:	80 91 a1 60 	lds	r24, 0x60A1	; 0x8060a1 <GPIO15>
 4a2:	90 91 a2 60 	lds	r25, 0x60A2	; 0x8060a2 <GPIO15+0x1>
 4a6:	a0 91 a3 60 	lds	r26, 0x60A3	; 0x8060a3 <GPIO15+0x2>
 4aa:	85 a7       	std	Z+45, r24	; 0x2d
 4ac:	96 a7       	std	Z+46, r25	; 0x2e
 4ae:	a7 a7       	std	Z+47, r26	; 0x2f
	
	DIOs[0] = DIO0;
 4b0:	eb e6       	ldi	r30, 0x6B	; 107
 4b2:	f0 e6       	ldi	r31, 0x60	; 96
 4b4:	80 91 47 60 	lds	r24, 0x6047	; 0x806047 <DIO0>
 4b8:	90 91 48 60 	lds	r25, 0x6048	; 0x806048 <DIO0+0x1>
 4bc:	a0 91 49 60 	lds	r26, 0x6049	; 0x806049 <DIO0+0x2>
 4c0:	80 83       	st	Z, r24
 4c2:	91 83       	std	Z+1, r25	; 0x01
 4c4:	a2 83       	std	Z+2, r26	; 0x02
	DIOs[1] = DIO1;
 4c6:	80 91 89 60 	lds	r24, 0x6089	; 0x806089 <DIO1>
 4ca:	90 91 8a 60 	lds	r25, 0x608A	; 0x80608a <DIO1+0x1>
 4ce:	a0 91 8b 60 	lds	r26, 0x608B	; 0x80608b <DIO1+0x2>
 4d2:	83 83       	std	Z+3, r24	; 0x03
 4d4:	94 83       	std	Z+4, r25	; 0x04
 4d6:	a5 83       	std	Z+5, r26	; 0x05
	DIOs[2] = DIO2;
 4d8:	80 91 8c 60 	lds	r24, 0x608C	; 0x80608c <DIO2>
 4dc:	90 91 8d 60 	lds	r25, 0x608D	; 0x80608d <DIO2+0x1>
 4e0:	a0 91 8e 60 	lds	r26, 0x608E	; 0x80608e <DIO2+0x2>
 4e4:	86 83       	std	Z+6, r24	; 0x06
 4e6:	97 83       	std	Z+7, r25	; 0x07
 4e8:	a0 87       	std	Z+8, r26	; 0x08
	DIOs[3] = DIO3;
 4ea:	80 91 bf 60 	lds	r24, 0x60BF	; 0x8060bf <DIO3>
 4ee:	90 91 c0 60 	lds	r25, 0x60C0	; 0x8060c0 <DIO3+0x1>
 4f2:	a0 91 c1 60 	lds	r26, 0x60C1	; 0x8060c1 <DIO3+0x2>
 4f6:	81 87       	std	Z+9, r24	; 0x09
 4f8:	92 87       	std	Z+10, r25	; 0x0a
 4fa:	a3 87       	std	Z+11, r26	; 0x0b
	DIOs[4] = DIO4;
 4fc:	80 91 aa 60 	lds	r24, 0x60AA	; 0x8060aa <DIO4>
 500:	90 91 ab 60 	lds	r25, 0x60AB	; 0x8060ab <DIO4+0x1>
 504:	a0 91 ac 60 	lds	r26, 0x60AC	; 0x8060ac <DIO4+0x2>
 508:	84 87       	std	Z+12, r24	; 0x0c
 50a:	95 87       	std	Z+13, r25	; 0x0d
 50c:	a6 87       	std	Z+14, r26	; 0x0e
	DIOs[5] = DIO5;
 50e:	80 91 4a 60 	lds	r24, 0x604A	; 0x80604a <DIO5>
 512:	90 91 4b 60 	lds	r25, 0x604B	; 0x80604b <DIO5+0x1>
 516:	a0 91 4c 60 	lds	r26, 0x604C	; 0x80604c <DIO5+0x2>
 51a:	87 87       	std	Z+15, r24	; 0x0f
 51c:	90 8b       	std	Z+16, r25	; 0x10
 51e:	a1 8b       	std	Z+17, r26	; 0x11
 520:	08 95       	ret

00000522 <digitalWrite>:
	digitalWrite(RFM_RST, 1);
}

void digitalWrite(GPIO pin, u8 value){

	if(value > 0){
 522:	44 23       	and	r20, r20
 524:	21 f0       	breq	.+8      	; 0x52e <digitalWrite+0xc>
		*(pin.port + OUTSET_OFFSET) = pin.pin; //OUTSET-Register
 526:	e7 2f       	mov	r30, r23
 528:	f8 2f       	mov	r31, r24
 52a:	65 83       	std	Z+5, r22	; 0x05
 52c:	08 95       	ret
	} else {
		*(pin.port + OUTCLR_OFFSET) = pin.pin; //OUTCLEAR-Register
 52e:	e7 2f       	mov	r30, r23
 530:	f8 2f       	mov	r31, r24
 532:	66 83       	std	Z+6, r22	; 0x06
 534:	08 95       	ret

00000536 <initializeGPIO>:

#include "GPIOFunctions.h"

void initializeGPIO(){
	//PORTA: LEDs
	PORTA_DIRSET = 0xFF; 
 536:	8f ef       	ldi	r24, 0xFF	; 255
 538:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7f0401>
	
	//PORTB: UART, SPI, Reset of LoRa 
	PORTB_DIRSET = 0xFF; //FD 
 53c:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7f0421>
	
	//PORTC: GPIO Low Byte
	PORTC_DIRSET = 0xFF; 
 540:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7f0441>
	
	//PORTD: GPIO High Byte
	PORTD_DIRSET = 0xFF; 
 544:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f0461>
	
	//PORTE: SPI Bus
	PORTE_DIRSET = 0x0D; 
 548:	8d e0       	ldi	r24, 0x0D	; 13
 54a:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <__TEXT_REGION_LENGTH__+0x7f0481>
	PORTE_PIN3CTRL = 0b00001000; //Set SS to have pullup
 54e:	88 e0       	ldi	r24, 0x08	; 8
 550:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <__TEXT_REGION_LENGTH__+0x7f0493>
	PORTE_OUTSET = 0b00001000;  //Set SS to high
 554:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7f0485>
	
	//PORTF: DIOs (All Inputs)
	PORTF_DIRSET = 0x00;
 558:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7f04a1>
	
	digitalWrite(RFM_RST, 1);
 55c:	60 91 83 60 	lds	r22, 0x6083	; 0x806083 <RFM_RST>
 560:	70 91 84 60 	lds	r23, 0x6084	; 0x806084 <RFM_RST+0x1>
 564:	80 91 85 60 	lds	r24, 0x6085	; 0x806085 <RFM_RST+0x2>
 568:	41 e0       	ldi	r20, 0x01	; 1
 56a:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
 56e:	08 95       	ret

00000570 <digitalRead>:
		*(pin.port + OUTCLR_OFFSET) = pin.pin; //OUTCLEAR-Register
	}
}

u8 digitalRead(GPIO pin){
	u8 bankData = *(pin.port + IN_OFFSET);
 570:	e7 2f       	mov	r30, r23
 572:	f8 2f       	mov	r31, r24
 574:	80 85       	ldd	r24, Z+8	; 0x08
	return bankData;
}
 576:	08 95       	ret

00000578 <createHeader>:
 *  Author: lucas
 */ 

#include "LoRaFunctions.h"

void createHeader(u16 receiver, u16 len, u8 * headerPtr){
 578:	fa 01       	movw	r30, r20
	memcpy(headerPtr + HDR_RECV_IDX, &receiver, HDR_RECV_LEN);
 57a:	80 83       	st	Z, r24
 57c:	91 83       	std	Z+1, r25	; 0x01
	memcpy(headerPtr + HDR_SENDER_IDX, &deviceID, HDR_SENDER_LEN);
 57e:	12 82       	std	Z+2, r1	; 0x02
 580:	13 82       	std	Z+3, r1	; 0x03
	memcpy(headerPtr + HDR_MSG_IDX, &len, HDR_MSG_LEN);
 582:	64 83       	std	Z+4, r22	; 0x04
 584:	75 83       	std	Z+5, r23	; 0x05
 586:	08 95       	ret

00000588 <main>:
#include "SPIFunctions.h"

 


int main(void){
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
 590:	28 97       	sbiw	r28, 0x08	; 8
 592:	cd bf       	out	0x3d, r28	; 61
 594:	de bf       	out	0x3e, r29	; 62
	initializeAVR();
 596:	0e 94 99 00 	call	0x132	; 0x132 <initializeAVR>
	initializeGPIO();
 59a:	0e 94 9b 02 	call	0x536	; 0x536 <initializeGPIO>
	initializeSPI();
 59e:	0e 94 83 04 	call	0x906	; 0x906 <initializeSPI>
	initializeLoRa();
 5a2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <initializeLoRa>
    /* Replace with your application code */
    
	u8 message[] = {0xAA, 0x55, 0x00, 0xFF, 0xDE, 0xAD, 0xBE, 0xEF};
 5a6:	88 e0       	ldi	r24, 0x08	; 8
 5a8:	e0 e0       	ldi	r30, 0x00	; 0
 5aa:	f0 e6       	ldi	r31, 0x60	; 96
 5ac:	de 01       	movw	r26, r28
 5ae:	11 96       	adiw	r26, 0x01	; 1
 5b0:	01 90       	ld	r0, Z+
 5b2:	0d 92       	st	X+, r0
 5b4:	8a 95       	dec	r24
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <main+0x28>
	transmit(message, 8, 0x01);
 5b8:	41 e0       	ldi	r20, 0x01	; 1
 5ba:	50 e0       	ldi	r21, 0x00	; 0
 5bc:	68 e0       	ldi	r22, 0x08	; 8
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	ce 01       	movw	r24, r28
 5c2:	01 96       	adiw	r24, 0x01	; 1
 5c4:	0e 94 23 04 	call	0x846	; 0x846 <transmit>
	while (1){
		for(u8 i = 0; i < 8; i++){
 5c8:	f1 2c       	mov	r15, r1
 5ca:	2a c0       	rjmp	.+84     	; 0x620 <main+0x98>
			digitalWrite(LEDs[i], 1);
 5cc:	0f 2d       	mov	r16, r15
 5ce:	10 e0       	ldi	r17, 0x00	; 0
 5d0:	c8 01       	movw	r24, r16
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	08 0f       	add	r16, r24
 5d8:	19 1f       	adc	r17, r25
 5da:	0d 5a       	subi	r16, 0xAD	; 173
 5dc:	1f 49       	sbci	r17, 0x9F	; 159
 5de:	f8 01       	movw	r30, r16
 5e0:	60 81       	ld	r22, Z
 5e2:	71 81       	ldd	r23, Z+1	; 0x01
 5e4:	82 81       	ldd	r24, Z+2	; 0x02
 5e6:	41 e0       	ldi	r20, 0x01	; 1
 5e8:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ec:	ff eb       	ldi	r31, 0xBF	; 191
 5ee:	24 ed       	ldi	r18, 0xD4	; 212
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	f1 50       	subi	r31, 0x01	; 1
 5f4:	20 40       	sbci	r18, 0x00	; 0
 5f6:	80 40       	sbci	r24, 0x00	; 0
 5f8:	e1 f7       	brne	.-8      	; 0x5f2 <main+0x6a>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <main+0x74>
 5fc:	00 00       	nop
			_delay_ms(25);
			digitalWrite(LEDs[i], 0);
 5fe:	f8 01       	movw	r30, r16
 600:	60 81       	ld	r22, Z
 602:	71 81       	ldd	r23, Z+1	; 0x01
 604:	82 81       	ldd	r24, Z+2	; 0x02
 606:	40 e0       	ldi	r20, 0x00	; 0
 608:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
 60c:	ff eb       	ldi	r31, 0xBF	; 191
 60e:	24 ed       	ldi	r18, 0xD4	; 212
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	f1 50       	subi	r31, 0x01	; 1
 614:	20 40       	sbci	r18, 0x00	; 0
 616:	80 40       	sbci	r24, 0x00	; 0
 618:	e1 f7       	brne	.-8      	; 0x612 <main+0x8a>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <main+0x94>
 61c:	00 00       	nop
    /* Replace with your application code */
    
	u8 message[] = {0xAA, 0x55, 0x00, 0xFF, 0xDE, 0xAD, 0xBE, 0xEF};
	transmit(message, 8, 0x01);
	while (1){
		for(u8 i = 0; i < 8; i++){
 61e:	f3 94       	inc	r15
 620:	97 e0       	ldi	r25, 0x07	; 7
 622:	9f 15       	cp	r25, r15
 624:	98 f6       	brcc	.-90     	; 0x5cc <main+0x44>
 626:	0f 2e       	mov	r0, r31
 628:	f6 e0       	ldi	r31, 0x06	; 6
 62a:	ff 2e       	mov	r15, r31
 62c:	f0 2d       	mov	r31, r0
 62e:	2a c0       	rjmp	.+84     	; 0x684 <main+0xfc>
			digitalWrite(LEDs[i], 0);
			_delay_ms(25);
		}
		
		for(u8 i = 6; i > 0; i--){
			digitalWrite(LEDs[i], 1);
 630:	0f 2d       	mov	r16, r15
 632:	10 e0       	ldi	r17, 0x00	; 0
 634:	c8 01       	movw	r24, r16
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	08 0f       	add	r16, r24
 63c:	19 1f       	adc	r17, r25
 63e:	0d 5a       	subi	r16, 0xAD	; 173
 640:	1f 49       	sbci	r17, 0x9F	; 159
 642:	f8 01       	movw	r30, r16
 644:	60 81       	ld	r22, Z
 646:	71 81       	ldd	r23, Z+1	; 0x01
 648:	82 81       	ldd	r24, Z+2	; 0x02
 64a:	41 e0       	ldi	r20, 0x01	; 1
 64c:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
 650:	ff eb       	ldi	r31, 0xBF	; 191
 652:	24 ed       	ldi	r18, 0xD4	; 212
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	f1 50       	subi	r31, 0x01	; 1
 658:	20 40       	sbci	r18, 0x00	; 0
 65a:	80 40       	sbci	r24, 0x00	; 0
 65c:	e1 f7       	brne	.-8      	; 0x656 <main+0xce>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <main+0xd8>
 660:	00 00       	nop
			_delay_ms(25);
			digitalWrite(LEDs[i], 0);
 662:	f8 01       	movw	r30, r16
 664:	60 81       	ld	r22, Z
 666:	71 81       	ldd	r23, Z+1	; 0x01
 668:	82 81       	ldd	r24, Z+2	; 0x02
 66a:	40 e0       	ldi	r20, 0x00	; 0
 66c:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
 670:	ff eb       	ldi	r31, 0xBF	; 191
 672:	24 ed       	ldi	r18, 0xD4	; 212
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	f1 50       	subi	r31, 0x01	; 1
 678:	20 40       	sbci	r18, 0x00	; 0
 67a:	80 40       	sbci	r24, 0x00	; 0
 67c:	e1 f7       	brne	.-8      	; 0x676 <main+0xee>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <main+0xf8>
 680:	00 00       	nop
			_delay_ms(25);
			digitalWrite(LEDs[i], 0);
			_delay_ms(25);
		}
		
		for(u8 i = 6; i > 0; i--){
 682:	fa 94       	dec	r15
 684:	f1 10       	cpse	r15, r1
 686:	d4 cf       	rjmp	.-88     	; 0x630 <main+0xa8>
 688:	9f cf       	rjmp	.-194    	; 0x5c8 <main+0x40>

0000068a <setPreambleLength>:
	debugOutput(opModeReg);
	
	if(opModeReg != (OP_MODE_LORA | OP_MODE_FSTX)){
		while(1){}
	}
}
 68a:	cf 93       	push	r28
 68c:	c8 2f       	mov	r28, r24
 68e:	69 2f       	mov	r22, r25
 690:	80 e2       	ldi	r24, 0x20	; 32
 692:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
 696:	6c 2f       	mov	r22, r28
 698:	81 e2       	ldi	r24, 0x21	; 33
 69a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
 69e:	cf 91       	pop	r28
 6a0:	08 95       	ret

000006a2 <debugOutput>:
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	c8 2f       	mov	r28, r24
 6aa:	48 2f       	mov	r20, r24
 6ac:	41 70       	andi	r20, 0x01	; 1
 6ae:	03 e5       	ldi	r16, 0x53	; 83
 6b0:	10 e6       	ldi	r17, 0x60	; 96
 6b2:	f8 01       	movw	r30, r16
 6b4:	60 81       	ld	r22, Z
 6b6:	71 81       	ldd	r23, Z+1	; 0x01
 6b8:	82 81       	ldd	r24, Z+2	; 0x02
 6ba:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
 6be:	4c 2f       	mov	r20, r28
 6c0:	42 70       	andi	r20, 0x02	; 2
 6c2:	50 e0       	ldi	r21, 0x00	; 0
 6c4:	55 95       	asr	r21
 6c6:	47 95       	ror	r20
 6c8:	f8 01       	movw	r30, r16
 6ca:	63 81       	ldd	r22, Z+3	; 0x03
 6cc:	74 81       	ldd	r23, Z+4	; 0x04
 6ce:	85 81       	ldd	r24, Z+5	; 0x05
 6d0:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
 6d4:	4c 2f       	mov	r20, r28
 6d6:	44 70       	andi	r20, 0x04	; 4
 6d8:	50 e0       	ldi	r21, 0x00	; 0
 6da:	55 95       	asr	r21
 6dc:	47 95       	ror	r20
 6de:	55 95       	asr	r21
 6e0:	47 95       	ror	r20
 6e2:	f8 01       	movw	r30, r16
 6e4:	66 81       	ldd	r22, Z+6	; 0x06
 6e6:	77 81       	ldd	r23, Z+7	; 0x07
 6e8:	80 85       	ldd	r24, Z+8	; 0x08
 6ea:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
 6ee:	4c 2f       	mov	r20, r28
 6f0:	48 70       	andi	r20, 0x08	; 8
 6f2:	50 e0       	ldi	r21, 0x00	; 0
 6f4:	55 95       	asr	r21
 6f6:	47 95       	ror	r20
 6f8:	55 95       	asr	r21
 6fa:	47 95       	ror	r20
 6fc:	55 95       	asr	r21
 6fe:	47 95       	ror	r20
 700:	f8 01       	movw	r30, r16
 702:	61 85       	ldd	r22, Z+9	; 0x09
 704:	72 85       	ldd	r23, Z+10	; 0x0a
 706:	83 85       	ldd	r24, Z+11	; 0x0b
 708:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
 70c:	4c 2f       	mov	r20, r28
 70e:	40 71       	andi	r20, 0x10	; 16
 710:	50 e0       	ldi	r21, 0x00	; 0
 712:	55 95       	asr	r21
 714:	47 95       	ror	r20
 716:	55 95       	asr	r21
 718:	47 95       	ror	r20
 71a:	55 95       	asr	r21
 71c:	47 95       	ror	r20
 71e:	55 95       	asr	r21
 720:	47 95       	ror	r20
 722:	f8 01       	movw	r30, r16
 724:	64 85       	ldd	r22, Z+12	; 0x0c
 726:	75 85       	ldd	r23, Z+13	; 0x0d
 728:	86 85       	ldd	r24, Z+14	; 0x0e
 72a:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
 72e:	4c 2f       	mov	r20, r28
 730:	40 72       	andi	r20, 0x20	; 32
 732:	50 e0       	ldi	r21, 0x00	; 0
 734:	55 95       	asr	r21
 736:	47 95       	ror	r20
 738:	55 95       	asr	r21
 73a:	47 95       	ror	r20
 73c:	55 95       	asr	r21
 73e:	47 95       	ror	r20
 740:	55 95       	asr	r21
 742:	47 95       	ror	r20
 744:	55 95       	asr	r21
 746:	47 95       	ror	r20
 748:	f8 01       	movw	r30, r16
 74a:	67 85       	ldd	r22, Z+15	; 0x0f
 74c:	70 89       	ldd	r23, Z+16	; 0x10
 74e:	81 89       	ldd	r24, Z+17	; 0x11
 750:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
 754:	4c 2f       	mov	r20, r28
 756:	40 74       	andi	r20, 0x40	; 64
 758:	50 e0       	ldi	r21, 0x00	; 0
 75a:	04 2e       	mov	r0, r20
 75c:	45 2f       	mov	r20, r21
 75e:	00 0c       	add	r0, r0
 760:	44 1f       	adc	r20, r20
 762:	55 0b       	sbc	r21, r21
 764:	00 0c       	add	r0, r0
 766:	44 1f       	adc	r20, r20
 768:	55 1f       	adc	r21, r21
 76a:	f8 01       	movw	r30, r16
 76c:	62 89       	ldd	r22, Z+18	; 0x12
 76e:	73 89       	ldd	r23, Z+19	; 0x13
 770:	84 89       	ldd	r24, Z+20	; 0x14
 772:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
 776:	4c 2f       	mov	r20, r28
 778:	44 1f       	adc	r20, r20
 77a:	44 27       	eor	r20, r20
 77c:	44 1f       	adc	r20, r20
 77e:	f8 01       	movw	r30, r16
 780:	65 89       	ldd	r22, Z+21	; 0x15
 782:	76 89       	ldd	r23, Z+22	; 0x16
 784:	87 89       	ldd	r24, Z+23	; 0x17
 786:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
 78a:	cf 91       	pop	r28
 78c:	1f 91       	pop	r17
 78e:	0f 91       	pop	r16
 790:	08 95       	ret

00000792 <setSleepMode>:
 792:	cf 93       	push	r28
 794:	60 e8       	ldi	r22, 0x80	; 128
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	0e 94 c0 04 	call	0x980	; 0x980 <rfmSpiRecv>
 7a2:	c8 2f       	mov	r28, r24
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <debugOutput>
 7aa:	c0 38       	cpi	r28, 0x80	; 128
 7ac:	09 f0       	breq	.+2      	; 0x7b0 <setSleepMode+0x1e>
 7ae:	ff cf       	rjmp	.-2      	; 0x7ae <setSleepMode+0x1c>
 7b0:	cf 91       	pop	r28
 7b2:	08 95       	ret

000007b4 <setStdbyMode>:
 7b4:	cf 93       	push	r28
 7b6:	61 e8       	ldi	r22, 0x81	; 129
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	0e 94 c0 04 	call	0x980	; 0x980 <rfmSpiRecv>
 7c4:	c8 2f       	mov	r28, r24
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <debugOutput>
 7cc:	c1 38       	cpi	r28, 0x81	; 129
 7ce:	09 f0       	breq	.+2      	; 0x7d2 <setStdbyMode+0x1e>
 7d0:	ff cf       	rjmp	.-2      	; 0x7d0 <setStdbyMode+0x1c>
 7d2:	cf 91       	pop	r28
 7d4:	08 95       	ret

000007d6 <initializeLoRa>:
 7d6:	0e 94 c9 03 	call	0x792	; 0x792 <setSleepMode>
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	8e e0       	ldi	r24, 0x0E	; 14
 7de:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	8f e0       	ldi	r24, 0x0F	; 15
 7e6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
 7ea:	0e 94 da 03 	call	0x7b4	; 0x7b4 <setStdbyMode>
 7ee:	68 e7       	ldi	r22, 0x78	; 120
 7f0:	8d e1       	ldi	r24, 0x1D	; 29
 7f2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
 7f6:	64 ec       	ldi	r22, 0xC4	; 196
 7f8:	8e e1       	ldi	r24, 0x1E	; 30
 7fa:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	86 e2       	ldi	r24, 0x26	; 38
 802:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
 806:	88 e0       	ldi	r24, 0x08	; 8
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 45 03 	call	0x68a	; 0x68a <setPreambleLength>
 80e:	60 ee       	ldi	r22, 0xE0	; 224
 810:	86 e0       	ldi	r24, 0x06	; 6
 812:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	87 e0       	ldi	r24, 0x07	; 7
 81a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	88 e0       	ldi	r24, 0x08	; 8
 822:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
 826:	60 ef       	ldi	r22, 0xF0	; 240
 828:	89 e0       	ldi	r24, 0x09	; 9
 82a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
 82e:	08 95       	ret

00000830 <setTXMode>:

void setTXMode(){
	//Switch to TX Mode
	//Set TX Mode as well as LoRa Mode bits
	rfmSpiSend(REG_OP_MODE, OP_MODE_LORA | OP_MODE_TX);
 830:	63 e8       	ldi	r22, 0x83	; 131
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>

	//Verify
	u8 opModeReg = rfmSpiRecv(REG_OP_MODE);
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	0e 94 c0 04 	call	0x980	; 0x980 <rfmSpiRecv>
	debugOutput(opModeReg);
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	0e 94 51 03 	call	0x6a2	; 0x6a2 <debugOutput>
 844:	08 95       	ret

00000846 <transmit>:
		while(1){}
	}
}


void transmit(u8 * msg, u16 msglen, u16 receiver){
 846:	cf 92       	push	r12
 848:	df 92       	push	r13
 84a:	ef 92       	push	r14
 84c:	ff 92       	push	r15
 84e:	0f 93       	push	r16
 850:	1f 93       	push	r17
 852:	cf 93       	push	r28
 854:	df 93       	push	r29
 856:	cd b7       	in	r28, 0x3d	; 61
 858:	de b7       	in	r29, 0x3e	; 62
 85a:	28 97       	sbiw	r28, 0x08	; 8
 85c:	cd bf       	out	0x3d, r28	; 61
 85e:	de bf       	out	0x3e, r29	; 62
 860:	6c 01       	movw	r12, r24
 862:	7b 01       	movw	r14, r22
 864:	ca 01       	movw	r24, r20
	
	u8 header[HDR_LEN];
	memset(header, 0, HDR_LEN * sizeof(u8));
 866:	ae 01       	movw	r20, r28
 868:	4f 5f       	subi	r20, 0xFF	; 255
 86a:	5f 4f       	sbci	r21, 0xFF	; 255
 86c:	28 e0       	ldi	r18, 0x08	; 8
 86e:	fa 01       	movw	r30, r20
 870:	11 92       	st	Z+, r1
 872:	2a 95       	dec	r18
 874:	e9 f7       	brne	.-6      	; 0x870 <transmit+0x2a>
	createHeader(receiver, msglen, header);
 876:	0e 94 bc 02 	call	0x578	; 0x578 <createHeader>
	
	//Set FIFO to address 0
	rfmSpiSend(REG_FIFO_ADDR_PTR, 0x00);
 87a:	60 e0       	ldi	r22, 0x00	; 0
 87c:	8d e0       	ldi	r24, 0x0D	; 13
 87e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>

	//spiSend(RFM_SPI_READ | REG_FIFO); //Send Address of FIFO
	for(u16 i = 0; i < HDR_LEN; i++){
 882:	00 e0       	ldi	r16, 0x00	; 0
 884:	10 e0       	ldi	r17, 0x00	; 0
 886:	0c c0       	rjmp	.+24     	; 0x8a0 <transmit+0x5a>
		//Write Header to FIFO
		rfmSpiSend(REG_FIFO, header[i]);
 888:	e1 e0       	ldi	r30, 0x01	; 1
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	ec 0f       	add	r30, r28
 88e:	fd 1f       	adc	r31, r29
 890:	e0 0f       	add	r30, r16
 892:	f1 1f       	adc	r31, r17
 894:	60 81       	ld	r22, Z
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
	
	//Set FIFO to address 0
	rfmSpiSend(REG_FIFO_ADDR_PTR, 0x00);

	//spiSend(RFM_SPI_READ | REG_FIFO); //Send Address of FIFO
	for(u16 i = 0; i < HDR_LEN; i++){
 89c:	0f 5f       	subi	r16, 0xFF	; 255
 89e:	1f 4f       	sbci	r17, 0xFF	; 255
 8a0:	08 30       	cpi	r16, 0x08	; 8
 8a2:	11 05       	cpc	r17, r1
 8a4:	88 f3       	brcs	.-30     	; 0x888 <transmit+0x42>
 8a6:	00 e0       	ldi	r16, 0x00	; 0
 8a8:	10 e0       	ldi	r17, 0x00	; 0
 8aa:	09 c0       	rjmp	.+18     	; 0x8be <transmit+0x78>
		//spiSend(header[i]);
	}
	
	for(u16 i = 0; i < msglen; i++){
		//Write Message to FIFO
		rfmSpiSend(REG_FIFO, msg[i]);
 8ac:	f6 01       	movw	r30, r12
 8ae:	e0 0f       	add	r30, r16
 8b0:	f1 1f       	adc	r31, r17
 8b2:	60 81       	ld	r22, Z
 8b4:	80 e0       	ldi	r24, 0x00	; 0
 8b6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
		//Write Header to FIFO
		rfmSpiSend(REG_FIFO, header[i]);
		//spiSend(header[i]);
	}
	
	for(u16 i = 0; i < msglen; i++){
 8ba:	0f 5f       	subi	r16, 0xFF	; 255
 8bc:	1f 4f       	sbci	r17, 0xFF	; 255
 8be:	0e 15       	cp	r16, r14
 8c0:	1f 05       	cpc	r17, r15
 8c2:	a0 f3       	brcs	.-24     	; 0x8ac <transmit+0x66>
		rfmSpiSend(REG_FIFO, msg[i]);
		//spiSend(msg[i]);
	}
	
	//Set DIO config
	rfmSpiSend(REG_DIO_MAPPING1, DIO0_MAPPING1);
 8c4:	60 e4       	ldi	r22, 0x40	; 64
 8c6:	80 e4       	ldi	r24, 0x40	; 64
 8c8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
	
	rfmSpiSend(REG_PAYLOAD_LENGTH, HDR_LEN + msglen);
 8cc:	68 e0       	ldi	r22, 0x08	; 8
 8ce:	6e 0d       	add	r22, r14
 8d0:	82 e2       	ldi	r24, 0x22	; 34
 8d2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <rfmSpiSend>
	
	//Set TX Mode to on and wait for interrupt
	setTXMode();
 8d6:	0e 94 18 04 	call	0x830	; 0x830 <setTXMode>
	
	//Wait for TXDone Interrupt
	while(!digitalRead(DIO0)){
 8da:	60 91 47 60 	lds	r22, 0x6047	; 0x806047 <DIO0>
 8de:	70 91 48 60 	lds	r23, 0x6048	; 0x806048 <DIO0+0x1>
 8e2:	80 91 49 60 	lds	r24, 0x6049	; 0x806049 <DIO0+0x2>
 8e6:	0e 94 b8 02 	call	0x570	; 0x570 <digitalRead>
 8ea:	88 23       	and	r24, r24
 8ec:	b1 f3       	breq	.-20     	; 0x8da <transmit+0x94>
		
	}
}
 8ee:	28 96       	adiw	r28, 0x08	; 8
 8f0:	cd bf       	out	0x3d, r28	; 61
 8f2:	de bf       	out	0x3e, r29	; 62
 8f4:	df 91       	pop	r29
 8f6:	cf 91       	pop	r28
 8f8:	1f 91       	pop	r17
 8fa:	0f 91       	pop	r16
 8fc:	ff 90       	pop	r15
 8fe:	ef 90       	pop	r14
 900:	df 90       	pop	r13
 902:	cf 90       	pop	r12
 904:	08 95       	ret

00000906 <initializeSPI>:
 */ 

#include "SPIFunctions.h"

void initializeSPI(){
	PORTMUX_SPIROUTEA = 0b00000001; //Set SPI0 to alternate position (PE0..4)
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7f05e4>
	//PORTE_DIRSET = 0b00001101; //Set SS, SCK, MOSI to output
	SPI0_CTRLA = 0b00100000; //Set to Master Mode and enable SPI with prescaler /4, do not enable yet
 90c:	e0 e4       	ldi	r30, 0x40	; 64
 90e:	f9 e0       	ldi	r31, 0x09	; 9
 910:	80 e2       	ldi	r24, 0x20	; 32
 912:	80 83       	st	Z, r24
	SPI0_CTRLB = 0b10000000; //BUFEN
 914:	80 e8       	ldi	r24, 0x80	; 128
 916:	80 93 41 09 	sts	0x0941, r24	; 0x800941 <__TEXT_REGION_LENGTH__+0x7f0941>
	SPI0_INTCTRL = 0b11100000; //Enable RX/TX Complete interrupts as well as Data Register Empty Interrupt 00000001
 91a:	80 ee       	ldi	r24, 0xE0	; 224
 91c:	80 93 42 09 	sts	0x0942, r24	; 0x800942 <__TEXT_REGION_LENGTH__+0x7f0942>
	SPI0_CTRLA |= 0b00000001; 
 920:	80 81       	ld	r24, Z
 922:	81 60       	ori	r24, 0x01	; 1
 924:	80 83       	st	Z, r24
 926:	89 ef       	ldi	r24, 0xF9	; 249
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	01 97       	sbiw	r24, 0x01	; 1
 92c:	f1 f7       	brne	.-4      	; 0x92a <initializeSPI+0x24>
 92e:	00 c0       	rjmp	.+0      	; 0x930 <initializeSPI+0x2a>
 930:	00 00       	nop
 932:	08 95       	ret

00000934 <spiRecv>:
	return data; 
}

u8 spiRecv(){
	u8 data; 
	while((SPI0.INTFLAGS & INTFLAG_DREIF) == 0);
 934:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 938:	85 ff       	sbrs	r24, 5
 93a:	fc cf       	rjmp	.-8      	; 0x934 <spiRecv>
	SPI0.DATA = 0xFF; //Send empty bits for clock to continue
 93c:	8f ef       	ldi	r24, 0xFF	; 255
 93e:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
	while((SPI0.INTFLAGS & INTFLAG_TXCIF) == 0);
 942:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 946:	86 ff       	sbrs	r24, 6
 948:	fc cf       	rjmp	.-8      	; 0x942 <spiRecv+0xe>
	data = (u8) SPI0.DATA; //Data is initially 0
 94a:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
	
	//Read only the last byte of buffer
	while(SPI0.INTFLAGS & INTFLAG_RXCIF){
 94e:	02 c0       	rjmp	.+4      	; 0x954 <spiRecv+0x20>
		data = (u8) SPI0.DATA; 
 950:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
	SPI0.DATA = 0xFF; //Send empty bits for clock to continue
	while((SPI0.INTFLAGS & INTFLAG_TXCIF) == 0);
	data = (u8) SPI0.DATA; //Data is initially 0
	
	//Read only the last byte of buffer
	while(SPI0.INTFLAGS & INTFLAG_RXCIF){
 954:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 958:	99 23       	and	r25, r25
 95a:	d4 f3       	brlt	.-12     	; 0x950 <spiRecv+0x1c>
		data = (u8) SPI0.DATA; 
	}
	
	SPI0_INTFLAGS = 0xC0; //Reset Interrupts
 95c:	90 ec       	ldi	r25, 0xC0	; 192
 95e:	90 93 43 09 	sts	0x0943, r25	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
	return data;
	
}
 962:	08 95       	ret

00000964 <spiSend>:
	digitalWrite(RFM_SS, 1);
	SPI0_INTFLAGS = 0xC0;
}

void spiSend(u8 data){
	while((SPI0.INTFLAGS & INTFLAG_DREIF) == 0);
 964:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 968:	95 ff       	sbrs	r25, 5
 96a:	fc cf       	rjmp	.-8      	; 0x964 <spiSend>
	SPI0.DATA = data;
 96c:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
	while((SPI0.INTFLAGS & INTFLAG_TXCIF) == 0);
 970:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 974:	86 ff       	sbrs	r24, 6
 976:	fc cf       	rjmp	.-8      	; 0x970 <spiSend+0xc>
	SPI0_INTFLAGS = 0xC0; //Reset Interrupts
 978:	80 ec       	ldi	r24, 0xC0	; 192
 97a:	80 93 43 09 	sts	0x0943, r24	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 97e:	08 95       	ret

00000980 <rfmSpiRecv>:
	SPI0_CTRLA |= 0b00000001; 

	_delay_ms(1); //Minimum before use
}

u8 rfmSpiRecv(u8 addr){
 980:	cf 93       	push	r28
 982:	c8 2f       	mov	r28, r24
	digitalWrite(RFM_SS, 0);
 984:	60 91 9e 60 	lds	r22, 0x609E	; 0x80609e <RFM_SS>
 988:	70 91 9f 60 	lds	r23, 0x609F	; 0x80609f <RFM_SS+0x1>
 98c:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <RFM_SS+0x2>
 990:	40 e0       	ldi	r20, 0x00	; 0
 992:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
	spiSend(RFM_SPI_READ | addr);
 996:	8c 2f       	mov	r24, r28
 998:	0e 94 b2 04 	call	0x964	; 0x964 <spiSend>
	u8 temp;
	for(u8 i = 0; i < 2; i++){ //Clear read buffer because the RFM95W sends register contents even during writes
 99c:	80 e0       	ldi	r24, 0x00	; 0
 99e:	03 c0       	rjmp	.+6      	; 0x9a6 <rfmSpiRecv+0x26>
		temp = (u8) SPI0.DATA;
 9a0:	90 91 44 09 	lds	r25, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>

u8 rfmSpiRecv(u8 addr){
	digitalWrite(RFM_SS, 0);
	spiSend(RFM_SPI_READ | addr);
	u8 temp;
	for(u8 i = 0; i < 2; i++){ //Clear read buffer because the RFM95W sends register contents even during writes
 9a4:	8f 5f       	subi	r24, 0xFF	; 255
 9a6:	82 30       	cpi	r24, 0x02	; 2
 9a8:	d8 f3       	brcs	.-10     	; 0x9a0 <rfmSpiRecv+0x20>
		temp = (u8) SPI0.DATA;
	}
	u8 data = spiRecv();
 9aa:	0e 94 9a 04 	call	0x934	; 0x934 <spiRecv>
 9ae:	c8 2f       	mov	r28, r24
	digitalWrite(RFM_SS, 1);
 9b0:	60 91 9e 60 	lds	r22, 0x609E	; 0x80609e <RFM_SS>
 9b4:	70 91 9f 60 	lds	r23, 0x609F	; 0x80609f <RFM_SS+0x1>
 9b8:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <RFM_SS+0x2>
 9bc:	41 e0       	ldi	r20, 0x01	; 1
 9be:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
	return data; 
}
 9c2:	8c 2f       	mov	r24, r28
 9c4:	cf 91       	pop	r28
 9c6:	08 95       	ret

000009c8 <rfmSpiSend>:
	SPI0_INTFLAGS = 0xC0; //Reset Interrupts
	return data;
	
}

void rfmSpiSend(u8 addr, u8 data){
 9c8:	1f 93       	push	r17
 9ca:	cf 93       	push	r28
 9cc:	df 93       	push	r29
 9ce:	c8 2f       	mov	r28, r24
 9d0:	16 2f       	mov	r17, r22
	u8 temp;
	digitalWrite(RFM_SS, 0);
 9d2:	60 91 9e 60 	lds	r22, 0x609E	; 0x80609e <RFM_SS>
 9d6:	70 91 9f 60 	lds	r23, 0x609F	; 0x80609f <RFM_SS+0x1>
 9da:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <RFM_SS+0x2>
 9de:	40 e0       	ldi	r20, 0x00	; 0
 9e0:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
	
	spiSend(RFM_SPI_WRITE | addr);
 9e4:	8c 2f       	mov	r24, r28
 9e6:	80 68       	ori	r24, 0x80	; 128
 9e8:	0e 94 b2 04 	call	0x964	; 0x964 <spiSend>
	//Clear read buffer because the RFM95W sends register contents even during writes
	temp = (u8) SPI0.DATA;
 9ec:	c0 e4       	ldi	r28, 0x40	; 64
 9ee:	d9 e0       	ldi	r29, 0x09	; 9
 9f0:	8c 81       	ldd	r24, Y+4	; 0x04
	
	spiSend(data);
 9f2:	81 2f       	mov	r24, r17
 9f4:	0e 94 b2 04 	call	0x964	; 0x964 <spiSend>
	//Clear read buffer because the RFM95W sends register contents even during writes
	temp = (u8) SPI0.DATA;
 9f8:	8c 81       	ldd	r24, Y+4	; 0x04
	
	digitalWrite(RFM_SS, 1);
 9fa:	60 91 9e 60 	lds	r22, 0x609E	; 0x80609e <RFM_SS>
 9fe:	70 91 9f 60 	lds	r23, 0x609F	; 0x80609f <RFM_SS+0x1>
 a02:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <RFM_SS+0x2>
 a06:	41 e0       	ldi	r20, 0x01	; 1
 a08:	0e 94 91 02 	call	0x522	; 0x522 <digitalWrite>
	SPI0_INTFLAGS = 0xC0;
 a0c:	80 ec       	ldi	r24, 0xC0	; 192
 a0e:	80 93 43 09 	sts	0x0943, r24	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
}
 a12:	df 91       	pop	r29
 a14:	cf 91       	pop	r28
 a16:	1f 91       	pop	r17
 a18:	08 95       	ret

00000a1a <_exit>:
 a1a:	f8 94       	cli

00000a1c <__stop_program>:
 a1c:	ff cf       	rjmp	.-2      	; 0xa1c <__stop_program>

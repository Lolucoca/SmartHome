
AVRLoRaDevBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00806000  0000083a  000008ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000083a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  00806008  00806008  000008d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000908  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000042fd  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000347d  00000000  00000000  00004d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dc5  00000000  00000000  000081f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00008fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a11  00000000  00000000  000091cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000304  00000000  00000000  0000abdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000aee1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
   8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
   c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  10:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  14:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  18:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  1c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  20:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  24:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  28:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  30:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  38:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  3c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  40:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  44:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  48:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  4c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  50:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  54:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  58:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  5c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  60:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  64:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  68:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  6c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  70:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  74:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  78:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  7c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  80:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  84:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  88:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  8c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  90:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  94:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  98:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  9c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  a0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  a4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  a8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  ac:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  b0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  b4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  b8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  bc:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  c0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  c4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  c8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  cc:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  d0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  d4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  d8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  dc:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  e0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  e4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  e8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  ec:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  f0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e6       	ldi	r17, 0x60	; 96
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e6       	ldi	r27, 0x60	; 96
 106:	ea e3       	ldi	r30, 0x3A	; 58
 108:	f8 e0       	ldi	r31, 0x08	; 8
 10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x10>
 10c:	05 90       	lpm	r0, Z+
 10e:	0d 92       	st	X+, r0
 110:	a8 30       	cpi	r26, 0x08	; 8
 112:	b1 07       	cpc	r27, r17
 114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0xc>

00000116 <__do_clear_bss>:
 116:	20 e6       	ldi	r18, 0x60	; 96
 118:	a8 e0       	ldi	r26, 0x08	; 8
 11a:	b0 e6       	ldi	r27, 0x60	; 96
 11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
 11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
 120:	af 3b       	cpi	r26, 0xBF	; 191
 122:	b2 07       	cpc	r27, r18
 124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
 126:	0e 94 9f 02 	call	0x53e	; 0x53e <main>
 12a:	0c 94 1b 04 	jmp	0x836	; 0x836 <_exit>

0000012e <__bad_interrupt>:
 12e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000132 <initializeAVR>:
GPIO DIOs[NUM_DIOS];



void initializeAVR(){
	LED0 = (GPIO) {0b00000001, (volatile u8 *) &PORTA};
 132:	e6 eb       	ldi	r30, 0xB6	; 182
 134:	f0 e6       	ldi	r31, 0x60	; 96
 136:	71 e0       	ldi	r23, 0x01	; 1
 138:	70 83       	st	Z, r23
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	94 e0       	ldi	r25, 0x04	; 4
 13e:	81 83       	std	Z+1, r24	; 0x01
 140:	92 83       	std	Z+2, r25	; 0x02
	LED1 = (GPIO) {0b00000010, (volatile u8 *) &PORTA};
 142:	e0 e5       	ldi	r30, 0x50	; 80
 144:	f0 e6       	ldi	r31, 0x60	; 96
 146:	62 e0       	ldi	r22, 0x02	; 2
 148:	60 83       	st	Z, r22
 14a:	81 83       	std	Z+1, r24	; 0x01
 14c:	92 83       	std	Z+2, r25	; 0x02
	LED2 = (GPIO) {0b00000100, (volatile u8 *) &PORTA};
 14e:	e5 e9       	ldi	r30, 0x95	; 149
 150:	f0 e6       	ldi	r31, 0x60	; 96
 152:	54 e0       	ldi	r21, 0x04	; 4
 154:	50 83       	st	Z, r21
 156:	81 83       	std	Z+1, r24	; 0x01
 158:	92 83       	std	Z+2, r25	; 0x02
	LED3 = (GPIO) {0b00001000, (volatile u8 *) &PORTA};
 15a:	ed e7       	ldi	r30, 0x7D	; 125
 15c:	f0 e6       	ldi	r31, 0x60	; 96
 15e:	28 e0       	ldi	r18, 0x08	; 8
 160:	20 83       	st	Z, r18
 162:	81 83       	std	Z+1, r24	; 0x01
 164:	92 83       	std	Z+2, r25	; 0x02
	LED4 = (GPIO) {0b00010000, (volatile u8 *) &PORTA};
 166:	e0 eb       	ldi	r30, 0xB0	; 176
 168:	f0 e6       	ldi	r31, 0x60	; 96
 16a:	40 e1       	ldi	r20, 0x10	; 16
 16c:	40 83       	st	Z, r20
 16e:	81 83       	std	Z+1, r24	; 0x01
 170:	92 83       	std	Z+2, r25	; 0x02
	LED5 = (GPIO) {0b00100000, (volatile u8 *) &PORTA};
 172:	e4 ea       	ldi	r30, 0xA4	; 164
 174:	f0 e6       	ldi	r31, 0x60	; 96
 176:	30 e2       	ldi	r19, 0x20	; 32
 178:	30 83       	st	Z, r19
 17a:	81 83       	std	Z+1, r24	; 0x01
 17c:	92 83       	std	Z+2, r25	; 0x02
	LED6 = (GPIO) {0b01000000, (volatile u8 *) &PORTA};
 17e:	a4 e4       	ldi	r26, 0x44	; 68
 180:	b0 e6       	ldi	r27, 0x60	; 96
 182:	f0 e4       	ldi	r31, 0x40	; 64
 184:	fc 93       	st	X, r31
 186:	11 96       	adiw	r26, 0x01	; 1
 188:	8d 93       	st	X+, r24
 18a:	9c 93       	st	X, r25
 18c:	12 97       	sbiw	r26, 0x02	; 2
	LED7 = (GPIO) {0b10000000, (volatile u8 *) &PORTA};
 18e:	ac e8       	ldi	r26, 0x8C	; 140
 190:	b0 e6       	ldi	r27, 0x60	; 96
 192:	e0 e8       	ldi	r30, 0x80	; 128
 194:	ec 93       	st	X, r30
 196:	11 96       	adiw	r26, 0x01	; 1
 198:	8d 93       	st	X+, r24
 19a:	9c 93       	st	X, r25
 19c:	12 97       	sbiw	r26, 0x02	; 2
		
	GPIO0 = (GPIO) {0b00000001, (volatile u8 *) &PORTC};
 19e:	a3 e8       	ldi	r26, 0x83	; 131
 1a0:	b0 e6       	ldi	r27, 0x60	; 96
 1a2:	7c 93       	st	X, r23
 1a4:	80 e4       	ldi	r24, 0x40	; 64
 1a6:	94 e0       	ldi	r25, 0x04	; 4
 1a8:	11 96       	adiw	r26, 0x01	; 1
 1aa:	8d 93       	st	X+, r24
 1ac:	9c 93       	st	X, r25
 1ae:	12 97       	sbiw	r26, 0x02	; 2
	GPIO1 = (GPIO) {0b00000010, (volatile u8 *) &PORTC};
 1b0:	a1 e4       	ldi	r26, 0x41	; 65
 1b2:	b0 e6       	ldi	r27, 0x60	; 96
 1b4:	6c 93       	st	X, r22
 1b6:	11 96       	adiw	r26, 0x01	; 1
 1b8:	8d 93       	st	X+, r24
 1ba:	9c 93       	st	X, r25
 1bc:	12 97       	sbiw	r26, 0x02	; 2
	GPIO2 = (GPIO) {0b00000100, (volatile u8 *) &PORTC};
 1be:	aa ea       	ldi	r26, 0xAA	; 170
 1c0:	b0 e6       	ldi	r27, 0x60	; 96
 1c2:	5c 93       	st	X, r21
 1c4:	11 96       	adiw	r26, 0x01	; 1
 1c6:	8d 93       	st	X+, r24
 1c8:	9c 93       	st	X, r25
 1ca:	12 97       	sbiw	r26, 0x02	; 2
	GPIO3 = (GPIO) {0b00001000, (volatile u8 *) &PORTC};
 1cc:	ad e4       	ldi	r26, 0x4D	; 77
 1ce:	b0 e6       	ldi	r27, 0x60	; 96
 1d0:	2c 93       	st	X, r18
 1d2:	11 96       	adiw	r26, 0x01	; 1
 1d4:	8d 93       	st	X+, r24
 1d6:	9c 93       	st	X, r25
 1d8:	12 97       	sbiw	r26, 0x02	; 2
	GPIO4 = (GPIO) {0b00010000, (volatile u8 *) &PORTC};
 1da:	ab e0       	ldi	r26, 0x0B	; 11
 1dc:	b0 e6       	ldi	r27, 0x60	; 96
 1de:	4c 93       	st	X, r20
 1e0:	11 96       	adiw	r26, 0x01	; 1
 1e2:	8d 93       	st	X+, r24
 1e4:	9c 93       	st	X, r25
 1e6:	12 97       	sbiw	r26, 0x02	; 2
	GPIO5 = (GPIO) {0b00100000, (volatile u8 *) &PORTC};
 1e8:	a9 eb       	ldi	r26, 0xB9	; 185
 1ea:	b0 e6       	ldi	r27, 0x60	; 96
 1ec:	3c 93       	st	X, r19
 1ee:	11 96       	adiw	r26, 0x01	; 1
 1f0:	8d 93       	st	X+, r24
 1f2:	9c 93       	st	X, r25
 1f4:	12 97       	sbiw	r26, 0x02	; 2
	GPIO6 = (GPIO) {0b01000000, (volatile u8 *) &PORTC};
 1f6:	af e8       	ldi	r26, 0x8F	; 143
 1f8:	b0 e6       	ldi	r27, 0x60	; 96
 1fa:	fc 93       	st	X, r31
 1fc:	11 96       	adiw	r26, 0x01	; 1
 1fe:	8d 93       	st	X+, r24
 200:	9c 93       	st	X, r25
 202:	12 97       	sbiw	r26, 0x02	; 2
	GPIO7 = (GPIO) {0b10000000, (volatile u8 *) &PORTC};
 204:	ad ea       	ldi	r26, 0xAD	; 173
 206:	b0 e6       	ldi	r27, 0x60	; 96
 208:	ec 93       	st	X, r30
 20a:	11 96       	adiw	r26, 0x01	; 1
 20c:	8d 93       	st	X+, r24
 20e:	9c 93       	st	X, r25
 210:	12 97       	sbiw	r26, 0x02	; 2
		
	GPIO8 = (GPIO) {0b00000001, (volatile u8 *) &PORTD};
 212:	a3 eb       	ldi	r26, 0xB3	; 179
 214:	b0 e6       	ldi	r27, 0x60	; 96
 216:	7c 93       	st	X, r23
 218:	80 e6       	ldi	r24, 0x60	; 96
 21a:	94 e0       	ldi	r25, 0x04	; 4
 21c:	11 96       	adiw	r26, 0x01	; 1
 21e:	8d 93       	st	X+, r24
 220:	9c 93       	st	X, r25
 222:	12 97       	sbiw	r26, 0x02	; 2
	GPIO9 = (GPIO) {0b00000010, (volatile u8 *) &PORTD};
 224:	a8 e9       	ldi	r26, 0x98	; 152
 226:	b0 e6       	ldi	r27, 0x60	; 96
 228:	6c 93       	st	X, r22
 22a:	11 96       	adiw	r26, 0x01	; 1
 22c:	8d 93       	st	X+, r24
 22e:	9c 93       	st	X, r25
 230:	12 97       	sbiw	r26, 0x02	; 2
	GPIO10 = (GPIO) {0b00000100, (volatile u8 *) &PORTD};
 232:	a1 ea       	ldi	r26, 0xA1	; 161
 234:	b0 e6       	ldi	r27, 0x60	; 96
 236:	5c 93       	st	X, r21
 238:	11 96       	adiw	r26, 0x01	; 1
 23a:	8d 93       	st	X+, r24
 23c:	9c 93       	st	X, r25
 23e:	12 97       	sbiw	r26, 0x02	; 2
	GPIO11 = (GPIO) {0b00001000, (volatile u8 *) &PORTD};
 240:	a0 e8       	ldi	r26, 0x80	; 128
 242:	b0 e6       	ldi	r27, 0x60	; 96
 244:	2c 93       	st	X, r18
 246:	11 96       	adiw	r26, 0x01	; 1
 248:	8d 93       	st	X+, r24
 24a:	9c 93       	st	X, r25
 24c:	12 97       	sbiw	r26, 0x02	; 2
	GPIO12 = (GPIO) {0b00010000, (volatile u8 *) &PORTD};
 24e:	ae e3       	ldi	r26, 0x3E	; 62
 250:	b0 e6       	ldi	r27, 0x60	; 96
 252:	4c 93       	st	X, r20
 254:	11 96       	adiw	r26, 0x01	; 1
 256:	8d 93       	st	X+, r24
 258:	9c 93       	st	X, r25
 25a:	12 97       	sbiw	r26, 0x02	; 2
	GPIO13 = (GPIO) {0b00100000, (volatile u8 *) &PORTD};
 25c:	a2 e9       	ldi	r26, 0x92	; 146
 25e:	b0 e6       	ldi	r27, 0x60	; 96
 260:	3c 93       	st	X, r19
 262:	11 96       	adiw	r26, 0x01	; 1
 264:	8d 93       	st	X+, r24
 266:	9c 93       	st	X, r25
 268:	12 97       	sbiw	r26, 0x02	; 2
	GPIO14 = (GPIO) {0b01000000, (volatile u8 *) &PORTD};
 26a:	a8 e0       	ldi	r26, 0x08	; 8
 26c:	b0 e6       	ldi	r27, 0x60	; 96
 26e:	fc 93       	st	X, r31
 270:	11 96       	adiw	r26, 0x01	; 1
 272:	8d 93       	st	X+, r24
 274:	9c 93       	st	X, r25
 276:	12 97       	sbiw	r26, 0x02	; 2
	GPIO15 = (GPIO) {0b10000000, (volatile u8 *) &PORTD};
 278:	ae e9       	ldi	r26, 0x9E	; 158
 27a:	b0 e6       	ldi	r27, 0x60	; 96
 27c:	ec 93       	st	X, r30
 27e:	11 96       	adiw	r26, 0x01	; 1
 280:	8d 93       	st	X+, r24
 282:	9c 93       	st	X, r25
 284:	12 97       	sbiw	r26, 0x02	; 2
	
	RFM_SS = (GPIO) {0b00001000, (volatile u8 *) &PORTE};
 286:	eb e9       	ldi	r30, 0x9B	; 155
 288:	f0 e6       	ldi	r31, 0x60	; 96
 28a:	20 83       	st	Z, r18
 28c:	80 e8       	ldi	r24, 0x80	; 128
 28e:	94 e0       	ldi	r25, 0x04	; 4
 290:	81 83       	std	Z+1, r24	; 0x01
 292:	92 83       	std	Z+2, r25	; 0x02
		
	DIO0 = (GPIO) {0b00000001, (volatile u8 *) &PORTF};
 294:	e7 e4       	ldi	r30, 0x47	; 71
 296:	f0 e6       	ldi	r31, 0x60	; 96
 298:	70 83       	st	Z, r23
 29a:	80 ea       	ldi	r24, 0xA0	; 160
 29c:	94 e0       	ldi	r25, 0x04	; 4
 29e:	81 83       	std	Z+1, r24	; 0x01
 2a0:	92 83       	std	Z+2, r25	; 0x02
	DIO1 = (GPIO) {0b00000010, (volatile u8 *) &PORTF};
 2a2:	e6 e8       	ldi	r30, 0x86	; 134
 2a4:	f0 e6       	ldi	r31, 0x60	; 96
 2a6:	60 83       	st	Z, r22
 2a8:	81 83       	std	Z+1, r24	; 0x01
 2aa:	92 83       	std	Z+2, r25	; 0x02
	DIO2 = (GPIO) {0b00000100, (volatile u8 *) &PORTF};
 2ac:	e9 e8       	ldi	r30, 0x89	; 137
 2ae:	f0 e6       	ldi	r31, 0x60	; 96
 2b0:	50 83       	st	Z, r21
 2b2:	81 83       	std	Z+1, r24	; 0x01
 2b4:	92 83       	std	Z+2, r25	; 0x02
	DIO3 = (GPIO) {0b00001000, (volatile u8 *) &PORTF};
 2b6:	ec eb       	ldi	r30, 0xBC	; 188
 2b8:	f0 e6       	ldi	r31, 0x60	; 96
 2ba:	20 83       	st	Z, r18
 2bc:	81 83       	std	Z+1, r24	; 0x01
 2be:	92 83       	std	Z+2, r25	; 0x02
	DIO4 = (GPIO) {0b00010000, (volatile u8 *) &PORTF};
 2c0:	e7 ea       	ldi	r30, 0xA7	; 167
 2c2:	f0 e6       	ldi	r31, 0x60	; 96
 2c4:	40 83       	st	Z, r20
 2c6:	81 83       	std	Z+1, r24	; 0x01
 2c8:	92 83       	std	Z+2, r25	; 0x02
	DIO5 = (GPIO) {0b00100000, (volatile u8 *) &PORTF};
 2ca:	ea e4       	ldi	r30, 0x4A	; 74
 2cc:	f0 e6       	ldi	r31, 0x60	; 96
 2ce:	30 83       	st	Z, r19
 2d0:	81 83       	std	Z+1, r24	; 0x01
 2d2:	92 83       	std	Z+2, r25	; 0x02
		
		
	LEDs[0] = LED0;
 2d4:	e3 e5       	ldi	r30, 0x53	; 83
 2d6:	f0 e6       	ldi	r31, 0x60	; 96
 2d8:	80 91 b6 60 	lds	r24, 0x60B6	; 0x8060b6 <LED0>
 2dc:	90 91 b7 60 	lds	r25, 0x60B7	; 0x8060b7 <LED0+0x1>
 2e0:	a0 91 b8 60 	lds	r26, 0x60B8	; 0x8060b8 <LED0+0x2>
 2e4:	80 83       	st	Z, r24
 2e6:	91 83       	std	Z+1, r25	; 0x01
 2e8:	a2 83       	std	Z+2, r26	; 0x02
	LEDs[1] = LED1;
 2ea:	80 91 50 60 	lds	r24, 0x6050	; 0x806050 <LED1>
 2ee:	90 91 51 60 	lds	r25, 0x6051	; 0x806051 <LED1+0x1>
 2f2:	a0 91 52 60 	lds	r26, 0x6052	; 0x806052 <LED1+0x2>
 2f6:	83 83       	std	Z+3, r24	; 0x03
 2f8:	94 83       	std	Z+4, r25	; 0x04
 2fa:	a5 83       	std	Z+5, r26	; 0x05
	LEDs[2] = LED2;
 2fc:	80 91 95 60 	lds	r24, 0x6095	; 0x806095 <LED2>
 300:	90 91 96 60 	lds	r25, 0x6096	; 0x806096 <LED2+0x1>
 304:	a0 91 97 60 	lds	r26, 0x6097	; 0x806097 <LED2+0x2>
 308:	86 83       	std	Z+6, r24	; 0x06
 30a:	97 83       	std	Z+7, r25	; 0x07
 30c:	a0 87       	std	Z+8, r26	; 0x08
	LEDs[3] = LED3;
 30e:	80 91 7d 60 	lds	r24, 0x607D	; 0x80607d <LED3>
 312:	90 91 7e 60 	lds	r25, 0x607E	; 0x80607e <LED3+0x1>
 316:	a0 91 7f 60 	lds	r26, 0x607F	; 0x80607f <LED3+0x2>
 31a:	81 87       	std	Z+9, r24	; 0x09
 31c:	92 87       	std	Z+10, r25	; 0x0a
 31e:	a3 87       	std	Z+11, r26	; 0x0b
	LEDs[4] = LED4;
 320:	80 91 b0 60 	lds	r24, 0x60B0	; 0x8060b0 <LED4>
 324:	90 91 b1 60 	lds	r25, 0x60B1	; 0x8060b1 <LED4+0x1>
 328:	a0 91 b2 60 	lds	r26, 0x60B2	; 0x8060b2 <LED4+0x2>
 32c:	84 87       	std	Z+12, r24	; 0x0c
 32e:	95 87       	std	Z+13, r25	; 0x0d
 330:	a6 87       	std	Z+14, r26	; 0x0e
	LEDs[5] = LED5;
 332:	80 91 a4 60 	lds	r24, 0x60A4	; 0x8060a4 <LED5>
 336:	90 91 a5 60 	lds	r25, 0x60A5	; 0x8060a5 <LED5+0x1>
 33a:	a0 91 a6 60 	lds	r26, 0x60A6	; 0x8060a6 <LED5+0x2>
 33e:	87 87       	std	Z+15, r24	; 0x0f
 340:	90 8b       	std	Z+16, r25	; 0x10
 342:	a1 8b       	std	Z+17, r26	; 0x11
	LEDs[6] = LED6;
 344:	80 91 44 60 	lds	r24, 0x6044	; 0x806044 <LED6>
 348:	90 91 45 60 	lds	r25, 0x6045	; 0x806045 <LED6+0x1>
 34c:	a0 91 46 60 	lds	r26, 0x6046	; 0x806046 <LED6+0x2>
 350:	82 8b       	std	Z+18, r24	; 0x12
 352:	93 8b       	std	Z+19, r25	; 0x13
 354:	a4 8b       	std	Z+20, r26	; 0x14
	LEDs[7] = LED7;
 356:	80 91 8c 60 	lds	r24, 0x608C	; 0x80608c <LED7>
 35a:	90 91 8d 60 	lds	r25, 0x608D	; 0x80608d <LED7+0x1>
 35e:	a0 91 8e 60 	lds	r26, 0x608E	; 0x80608e <LED7+0x2>
 362:	85 8b       	std	Z+21, r24	; 0x15
 364:	96 8b       	std	Z+22, r25	; 0x16
 366:	a7 8b       	std	Z+23, r26	; 0x17
	
	GPIOs[0] = GPIO0;
 368:	ee e0       	ldi	r30, 0x0E	; 14
 36a:	f0 e6       	ldi	r31, 0x60	; 96
 36c:	80 91 83 60 	lds	r24, 0x6083	; 0x806083 <GPIO0>
 370:	90 91 84 60 	lds	r25, 0x6084	; 0x806084 <GPIO0+0x1>
 374:	a0 91 85 60 	lds	r26, 0x6085	; 0x806085 <GPIO0+0x2>
 378:	80 83       	st	Z, r24
 37a:	91 83       	std	Z+1, r25	; 0x01
 37c:	a2 83       	std	Z+2, r26	; 0x02
	GPIOs[1] = GPIO1;
 37e:	80 91 41 60 	lds	r24, 0x6041	; 0x806041 <GPIO1>
 382:	90 91 42 60 	lds	r25, 0x6042	; 0x806042 <GPIO1+0x1>
 386:	a0 91 43 60 	lds	r26, 0x6043	; 0x806043 <GPIO1+0x2>
 38a:	83 83       	std	Z+3, r24	; 0x03
 38c:	94 83       	std	Z+4, r25	; 0x04
 38e:	a5 83       	std	Z+5, r26	; 0x05
	GPIOs[2] = GPIO2;
 390:	80 91 aa 60 	lds	r24, 0x60AA	; 0x8060aa <GPIO2>
 394:	90 91 ab 60 	lds	r25, 0x60AB	; 0x8060ab <GPIO2+0x1>
 398:	a0 91 ac 60 	lds	r26, 0x60AC	; 0x8060ac <GPIO2+0x2>
 39c:	86 83       	std	Z+6, r24	; 0x06
 39e:	97 83       	std	Z+7, r25	; 0x07
 3a0:	a0 87       	std	Z+8, r26	; 0x08
	GPIOs[3] = GPIO3;
 3a2:	80 91 4d 60 	lds	r24, 0x604D	; 0x80604d <GPIO3>
 3a6:	90 91 4e 60 	lds	r25, 0x604E	; 0x80604e <GPIO3+0x1>
 3aa:	a0 91 4f 60 	lds	r26, 0x604F	; 0x80604f <GPIO3+0x2>
 3ae:	81 87       	std	Z+9, r24	; 0x09
 3b0:	92 87       	std	Z+10, r25	; 0x0a
 3b2:	a3 87       	std	Z+11, r26	; 0x0b
	GPIOs[4] = GPIO4;
 3b4:	80 91 0b 60 	lds	r24, 0x600B	; 0x80600b <GPIO4>
 3b8:	90 91 0c 60 	lds	r25, 0x600C	; 0x80600c <GPIO4+0x1>
 3bc:	a0 91 0d 60 	lds	r26, 0x600D	; 0x80600d <GPIO4+0x2>
 3c0:	84 87       	std	Z+12, r24	; 0x0c
 3c2:	95 87       	std	Z+13, r25	; 0x0d
 3c4:	a6 87       	std	Z+14, r26	; 0x0e
	GPIOs[5] = GPIO5;
 3c6:	80 91 b9 60 	lds	r24, 0x60B9	; 0x8060b9 <GPIO5>
 3ca:	90 91 ba 60 	lds	r25, 0x60BA	; 0x8060ba <GPIO5+0x1>
 3ce:	a0 91 bb 60 	lds	r26, 0x60BB	; 0x8060bb <GPIO5+0x2>
 3d2:	87 87       	std	Z+15, r24	; 0x0f
 3d4:	90 8b       	std	Z+16, r25	; 0x10
 3d6:	a1 8b       	std	Z+17, r26	; 0x11
	GPIOs[6] = GPIO6;
 3d8:	80 91 8f 60 	lds	r24, 0x608F	; 0x80608f <GPIO6>
 3dc:	90 91 90 60 	lds	r25, 0x6090	; 0x806090 <GPIO6+0x1>
 3e0:	a0 91 91 60 	lds	r26, 0x6091	; 0x806091 <GPIO6+0x2>
 3e4:	82 8b       	std	Z+18, r24	; 0x12
 3e6:	93 8b       	std	Z+19, r25	; 0x13
 3e8:	a4 8b       	std	Z+20, r26	; 0x14
	GPIOs[7] = GPIO7;
 3ea:	80 91 ad 60 	lds	r24, 0x60AD	; 0x8060ad <GPIO7>
 3ee:	90 91 ae 60 	lds	r25, 0x60AE	; 0x8060ae <GPIO7+0x1>
 3f2:	a0 91 af 60 	lds	r26, 0x60AF	; 0x8060af <GPIO7+0x2>
 3f6:	85 8b       	std	Z+21, r24	; 0x15
 3f8:	96 8b       	std	Z+22, r25	; 0x16
 3fa:	a7 8b       	std	Z+23, r26	; 0x17
	
	GPIOs[8] = GPIO8;
 3fc:	80 91 b3 60 	lds	r24, 0x60B3	; 0x8060b3 <GPIO8>
 400:	90 91 b4 60 	lds	r25, 0x60B4	; 0x8060b4 <GPIO8+0x1>
 404:	a0 91 b5 60 	lds	r26, 0x60B5	; 0x8060b5 <GPIO8+0x2>
 408:	80 8f       	std	Z+24, r24	; 0x18
 40a:	91 8f       	std	Z+25, r25	; 0x19
 40c:	a2 8f       	std	Z+26, r26	; 0x1a
	GPIOs[9] = GPIO9;
 40e:	80 91 98 60 	lds	r24, 0x6098	; 0x806098 <GPIO9>
 412:	90 91 99 60 	lds	r25, 0x6099	; 0x806099 <GPIO9+0x1>
 416:	a0 91 9a 60 	lds	r26, 0x609A	; 0x80609a <GPIO9+0x2>
 41a:	83 8f       	std	Z+27, r24	; 0x1b
 41c:	94 8f       	std	Z+28, r25	; 0x1c
 41e:	a5 8f       	std	Z+29, r26	; 0x1d
	GPIOs[10] = GPIO10;
 420:	80 91 a1 60 	lds	r24, 0x60A1	; 0x8060a1 <GPIO10>
 424:	90 91 a2 60 	lds	r25, 0x60A2	; 0x8060a2 <GPIO10+0x1>
 428:	a0 91 a3 60 	lds	r26, 0x60A3	; 0x8060a3 <GPIO10+0x2>
 42c:	86 8f       	std	Z+30, r24	; 0x1e
 42e:	97 8f       	std	Z+31, r25	; 0x1f
 430:	a0 a3       	std	Z+32, r26	; 0x20
	GPIOs[11] = GPIO11;
 432:	80 91 80 60 	lds	r24, 0x6080	; 0x806080 <GPIO11>
 436:	90 91 81 60 	lds	r25, 0x6081	; 0x806081 <GPIO11+0x1>
 43a:	a0 91 82 60 	lds	r26, 0x6082	; 0x806082 <GPIO11+0x2>
 43e:	81 a3       	std	Z+33, r24	; 0x21
 440:	92 a3       	std	Z+34, r25	; 0x22
 442:	a3 a3       	std	Z+35, r26	; 0x23
	GPIOs[12] = GPIO12;
 444:	80 91 3e 60 	lds	r24, 0x603E	; 0x80603e <GPIO12>
 448:	90 91 3f 60 	lds	r25, 0x603F	; 0x80603f <GPIO12+0x1>
 44c:	a0 91 40 60 	lds	r26, 0x6040	; 0x806040 <GPIO12+0x2>
 450:	84 a3       	std	Z+36, r24	; 0x24
 452:	95 a3       	std	Z+37, r25	; 0x25
 454:	a6 a3       	std	Z+38, r26	; 0x26
	GPIOs[13] = GPIO13;
 456:	80 91 92 60 	lds	r24, 0x6092	; 0x806092 <GPIO13>
 45a:	90 91 93 60 	lds	r25, 0x6093	; 0x806093 <GPIO13+0x1>
 45e:	a0 91 94 60 	lds	r26, 0x6094	; 0x806094 <GPIO13+0x2>
 462:	87 a3       	std	Z+39, r24	; 0x27
 464:	90 a7       	std	Z+40, r25	; 0x28
 466:	a1 a7       	std	Z+41, r26	; 0x29
	GPIOs[14] = GPIO14;
 468:	80 91 08 60 	lds	r24, 0x6008	; 0x806008 <__data_end>
 46c:	90 91 09 60 	lds	r25, 0x6009	; 0x806009 <__data_end+0x1>
 470:	a0 91 0a 60 	lds	r26, 0x600A	; 0x80600a <__data_end+0x2>
 474:	82 a7       	std	Z+42, r24	; 0x2a
 476:	93 a7       	std	Z+43, r25	; 0x2b
 478:	a4 a7       	std	Z+44, r26	; 0x2c
	GPIOs[15] = GPIO15;
 47a:	80 91 9e 60 	lds	r24, 0x609E	; 0x80609e <GPIO15>
 47e:	90 91 9f 60 	lds	r25, 0x609F	; 0x80609f <GPIO15+0x1>
 482:	a0 91 a0 60 	lds	r26, 0x60A0	; 0x8060a0 <GPIO15+0x2>
 486:	85 a7       	std	Z+45, r24	; 0x2d
 488:	96 a7       	std	Z+46, r25	; 0x2e
 48a:	a7 a7       	std	Z+47, r26	; 0x2f
	
	DIOs[0] = DIO0;
 48c:	eb e6       	ldi	r30, 0x6B	; 107
 48e:	f0 e6       	ldi	r31, 0x60	; 96
 490:	80 91 47 60 	lds	r24, 0x6047	; 0x806047 <DIO0>
 494:	90 91 48 60 	lds	r25, 0x6048	; 0x806048 <DIO0+0x1>
 498:	a0 91 49 60 	lds	r26, 0x6049	; 0x806049 <DIO0+0x2>
 49c:	80 83       	st	Z, r24
 49e:	91 83       	std	Z+1, r25	; 0x01
 4a0:	a2 83       	std	Z+2, r26	; 0x02
	DIOs[1] = DIO1;
 4a2:	80 91 86 60 	lds	r24, 0x6086	; 0x806086 <DIO1>
 4a6:	90 91 87 60 	lds	r25, 0x6087	; 0x806087 <DIO1+0x1>
 4aa:	a0 91 88 60 	lds	r26, 0x6088	; 0x806088 <DIO1+0x2>
 4ae:	83 83       	std	Z+3, r24	; 0x03
 4b0:	94 83       	std	Z+4, r25	; 0x04
 4b2:	a5 83       	std	Z+5, r26	; 0x05
	DIOs[2] = DIO2;
 4b4:	80 91 89 60 	lds	r24, 0x6089	; 0x806089 <DIO2>
 4b8:	90 91 8a 60 	lds	r25, 0x608A	; 0x80608a <DIO2+0x1>
 4bc:	a0 91 8b 60 	lds	r26, 0x608B	; 0x80608b <DIO2+0x2>
 4c0:	86 83       	std	Z+6, r24	; 0x06
 4c2:	97 83       	std	Z+7, r25	; 0x07
 4c4:	a0 87       	std	Z+8, r26	; 0x08
	DIOs[3] = DIO3;
 4c6:	80 91 bc 60 	lds	r24, 0x60BC	; 0x8060bc <DIO3>
 4ca:	90 91 bd 60 	lds	r25, 0x60BD	; 0x8060bd <DIO3+0x1>
 4ce:	a0 91 be 60 	lds	r26, 0x60BE	; 0x8060be <DIO3+0x2>
 4d2:	81 87       	std	Z+9, r24	; 0x09
 4d4:	92 87       	std	Z+10, r25	; 0x0a
 4d6:	a3 87       	std	Z+11, r26	; 0x0b
	DIOs[4] = DIO4;
 4d8:	80 91 a7 60 	lds	r24, 0x60A7	; 0x8060a7 <DIO4>
 4dc:	90 91 a8 60 	lds	r25, 0x60A8	; 0x8060a8 <DIO4+0x1>
 4e0:	a0 91 a9 60 	lds	r26, 0x60A9	; 0x8060a9 <DIO4+0x2>
 4e4:	84 87       	std	Z+12, r24	; 0x0c
 4e6:	95 87       	std	Z+13, r25	; 0x0d
 4e8:	a6 87       	std	Z+14, r26	; 0x0e
	DIOs[5] = DIO5;
 4ea:	80 91 4a 60 	lds	r24, 0x604A	; 0x80604a <DIO5>
 4ee:	90 91 4b 60 	lds	r25, 0x604B	; 0x80604b <DIO5+0x1>
 4f2:	a0 91 4c 60 	lds	r26, 0x604C	; 0x80604c <DIO5+0x2>
 4f6:	87 87       	std	Z+15, r24	; 0x0f
 4f8:	90 8b       	std	Z+16, r25	; 0x10
 4fa:	a1 8b       	std	Z+17, r26	; 0x11
 4fc:	08 95       	ret

000004fe <initializeGPIO>:

#include "GPIOFunctions.h"

void initializeGPIO(){
	//PORTA: LEDs
	PORTA_DIRSET = 0xFF; 
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7f0401>
	
	//PORTC: GPIO Low Byte
	PORTC_DIRSET = 0xFF; 
 504:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7f0441>
	
	//PORTD: GPIO High Byte
	PORTD_DIRSET = 0xFF; 
 508:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f0461>
	
	//PORTF: DIOs (All Inputs)
	PORTF_DIRSET = 0x00;
 50c:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7f04a1>
 510:	08 95       	ret

00000512 <digitalWrite>:
}

void digitalWrite(GPIO pin, u8 value){

	if(value > 0){
 512:	44 23       	and	r20, r20
 514:	21 f0       	breq	.+8      	; 0x51e <digitalWrite+0xc>
		*(pin.port + OUTSET_OFFSET) = pin.pin; //OUTSET-Register
 516:	e7 2f       	mov	r30, r23
 518:	f8 2f       	mov	r31, r24
 51a:	65 83       	std	Z+5, r22	; 0x05
 51c:	08 95       	ret
	} else {
		*(pin.port + OUTCLR_OFFSET) = pin.pin; //OUTCLEAR-Register
 51e:	e7 2f       	mov	r30, r23
 520:	f8 2f       	mov	r31, r24
 522:	66 83       	std	Z+6, r22	; 0x06
 524:	08 95       	ret

00000526 <digitalRead>:
	}
}

u8 digitalRead(GPIO pin){
	u8 bankData = *(pin.port + IN_OFFSET);
 526:	e7 2f       	mov	r30, r23
 528:	f8 2f       	mov	r31, r24
 52a:	80 85       	ldd	r24, Z+8	; 0x08
	return bankData;
}
 52c:	08 95       	ret

0000052e <createHeader>:
 *  Author: lucas
 */ 

#include "LoRaFunctions.h"

void createHeader(u16 receiver, u16 len, u8 * headerPtr){
 52e:	fa 01       	movw	r30, r20
	memcpy(headerPtr + HDR_RECV_IDX, &receiver, HDR_RECV_LEN);
 530:	80 83       	st	Z, r24
 532:	91 83       	std	Z+1, r25	; 0x01
	memcpy(headerPtr + HDR_SENDER_IDX, &deviceID, HDR_SENDER_LEN);
 534:	12 82       	std	Z+2, r1	; 0x02
 536:	13 82       	std	Z+3, r1	; 0x03
	memcpy(headerPtr + HDR_MSG_IDX, &len, HDR_MSG_LEN);
 538:	64 83       	std	Z+4, r22	; 0x04
 53a:	75 83       	std	Z+5, r23	; 0x05
 53c:	08 95       	ret

0000053e <main>:
#include "RFM95W.h"
#include "SPIFunctions.h"


int main(void)
{
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62
 546:	28 97       	sbiw	r28, 0x08	; 8
 548:	cd bf       	out	0x3d, r28	; 61
 54a:	de bf       	out	0x3e, r29	; 62
	initializeGPIO();
 54c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <initializeGPIO>
	initializeAVR();
 550:	0e 94 99 00 	call	0x132	; 0x132 <initializeAVR>
	initializeSPI();
 554:	0e 94 b9 03 	call	0x772	; 0x772 <initializeSPI>
	initializeLoRa();
 558:	0e 94 03 03 	call	0x606	; 0x606 <initializeLoRa>
    /* Replace with your application code */
    
	u8 message[] = {0xAA, 0x55, 0x00, 0xFF, 0xDE, 0xAD, 0xBE, 0xEF};
 55c:	88 e0       	ldi	r24, 0x08	; 8
 55e:	e0 e0       	ldi	r30, 0x00	; 0
 560:	f0 e6       	ldi	r31, 0x60	; 96
 562:	de 01       	movw	r26, r28
 564:	11 96       	adiw	r26, 0x01	; 1
 566:	01 90       	ld	r0, Z+
 568:	0d 92       	st	X+, r0
 56a:	8a 95       	dec	r24
 56c:	e1 f7       	brne	.-8      	; 0x566 <main+0x28>
	
	while (1) 
    {
		digitalWrite(LED0, 0);
 56e:	60 91 b6 60 	lds	r22, 0x60B6	; 0x8060b6 <LED0>
 572:	70 91 b7 60 	lds	r23, 0x60B7	; 0x8060b7 <LED0+0x1>
 576:	80 91 b8 60 	lds	r24, 0x60B8	; 0x8060b8 <LED0+0x2>
 57a:	40 e0       	ldi	r20, 0x00	; 0
 57c:	0e 94 89 02 	call	0x512	; 0x512 <digitalWrite>
		transmit(message, 8, 0x01);
 580:	41 e0       	ldi	r20, 0x01	; 1
 582:	50 e0       	ldi	r21, 0x00	; 0
 584:	68 e0       	ldi	r22, 0x08	; 8
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	ce 01       	movw	r24, r28
 58a:	01 96       	adiw	r24, 0x01	; 1
 58c:	0e 94 4d 03 	call	0x69a	; 0x69a <transmit>
		for(u32 i = 0; i < 5000000; i++){
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	dc 01       	movw	r26, r24
 596:	04 c0       	rjmp	.+8      	; 0x5a0 <main+0x62>
			asm("nop");
 598:	00 00       	nop
	
	while (1) 
    {
		digitalWrite(LED0, 0);
		transmit(message, 8, 0x01);
		for(u32 i = 0; i < 5000000; i++){
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	a1 1d       	adc	r26, r1
 59e:	b1 1d       	adc	r27, r1
 5a0:	80 34       	cpi	r24, 0x40	; 64
 5a2:	2b e4       	ldi	r18, 0x4B	; 75
 5a4:	92 07       	cpc	r25, r18
 5a6:	2c e4       	ldi	r18, 0x4C	; 76
 5a8:	a2 07       	cpc	r26, r18
 5aa:	b1 05       	cpc	r27, r1
 5ac:	a8 f3       	brcs	.-22     	; 0x598 <main+0x5a>
			asm("nop");
		}
		digitalWrite(LED0, 1);
 5ae:	60 91 b6 60 	lds	r22, 0x60B6	; 0x8060b6 <LED0>
 5b2:	70 91 b7 60 	lds	r23, 0x60B7	; 0x8060b7 <LED0+0x1>
 5b6:	80 91 b8 60 	lds	r24, 0x60B8	; 0x8060b8 <LED0+0x2>
 5ba:	41 e0       	ldi	r20, 0x01	; 1
 5bc:	0e 94 89 02 	call	0x512	; 0x512 <digitalWrite>
    }
 5c0:	d6 cf       	rjmp	.-84     	; 0x56e <main+0x30>

000005c2 <setPreambleLength>:
	rfmSpiSend(REG_OP_MODE, OP_MODE_LORA | OP_MODE_CAD);

	//Verify
	u8 opModeReg = rfmSpiRecv(REG_OP_MODE);
	
	if(opModeReg != (OP_MODE_LORA | OP_MODE_CAD)){
 5c2:	cf 93       	push	r28
 5c4:	c8 2f       	mov	r28, r24
 5c6:	69 2f       	mov	r22, r25
 5c8:	80 e2       	ldi	r24, 0x20	; 32
 5ca:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rfmSpiSend>
 5ce:	6c 2f       	mov	r22, r28
 5d0:	81 e2       	ldi	r24, 0x21	; 33
 5d2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rfmSpiSend>
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <setSleepMode>:
 5da:	60 e1       	ldi	r22, 0x10	; 16
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rfmSpiSend>
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <rfmSpiRecv>
 5e8:	80 31       	cpi	r24, 0x10	; 16
 5ea:	09 f0       	breq	.+2      	; 0x5ee <setSleepMode+0x14>
 5ec:	ff cf       	rjmp	.-2      	; 0x5ec <setSleepMode+0x12>
 5ee:	08 95       	ret

000005f0 <setStdbyMode>:
 5f0:	61 e1       	ldi	r22, 0x11	; 17
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rfmSpiSend>
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <rfmSpiRecv>
 5fe:	81 31       	cpi	r24, 0x11	; 17
 600:	09 f0       	breq	.+2      	; 0x604 <setStdbyMode+0x14>
 602:	ff cf       	rjmp	.-2      	; 0x602 <setStdbyMode+0x12>
 604:	08 95       	ret

00000606 <initializeLoRa>:
 606:	60 91 9b 60 	lds	r22, 0x609B	; 0x80609b <RFM_SS>
 60a:	70 91 9c 60 	lds	r23, 0x609C	; 0x80609c <RFM_SS+0x1>
 60e:	80 91 9d 60 	lds	r24, 0x609D	; 0x80609d <RFM_SS+0x2>
 612:	40 e0       	ldi	r20, 0x00	; 0
 614:	0e 94 89 02 	call	0x512	; 0x512 <digitalWrite>
 618:	0e 94 ed 02 	call	0x5da	; 0x5da <setSleepMode>
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	8e e0       	ldi	r24, 0x0E	; 14
 620:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rfmSpiSend>
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	8f e0       	ldi	r24, 0x0F	; 15
 628:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rfmSpiSend>
 62c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <setStdbyMode>
 630:	68 e7       	ldi	r22, 0x78	; 120
 632:	8d e1       	ldi	r24, 0x1D	; 29
 634:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rfmSpiSend>
 638:	64 ec       	ldi	r22, 0xC4	; 196
 63a:	8e e1       	ldi	r24, 0x1E	; 30
 63c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rfmSpiSend>
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	86 e2       	ldi	r24, 0x26	; 38
 644:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rfmSpiSend>
 648:	88 e0       	ldi	r24, 0x08	; 8
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <setPreambleLength>
 650:	60 ee       	ldi	r22, 0xE0	; 224
 652:	86 e0       	ldi	r24, 0x06	; 6
 654:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rfmSpiSend>
 658:	60 e0       	ldi	r22, 0x00	; 0
 65a:	87 e0       	ldi	r24, 0x07	; 7
 65c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rfmSpiSend>
 660:	60 e0       	ldi	r22, 0x00	; 0
 662:	88 e0       	ldi	r24, 0x08	; 8
 664:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rfmSpiSend>
 668:	60 ef       	ldi	r22, 0xF0	; 240
 66a:	89 e0       	ldi	r24, 0x09	; 9
 66c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rfmSpiSend>
 670:	60 91 9b 60 	lds	r22, 0x609B	; 0x80609b <RFM_SS>
 674:	70 91 9c 60 	lds	r23, 0x609C	; 0x80609c <RFM_SS+0x1>
 678:	80 91 9d 60 	lds	r24, 0x609D	; 0x80609d <RFM_SS+0x2>
 67c:	41 e0       	ldi	r20, 0x01	; 1
 67e:	0e 94 89 02 	call	0x512	; 0x512 <digitalWrite>
 682:	08 95       	ret

00000684 <setTXMode>:
 684:	63 e1       	ldi	r22, 0x13	; 19
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rfmSpiSend>
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <rfmSpiRecv>
 692:	83 31       	cpi	r24, 0x13	; 19
 694:	09 f0       	breq	.+2      	; 0x698 <setTXMode+0x14>
 696:	ff cf       	rjmp	.-2      	; 0x696 <setTXMode+0x12>
 698:	08 95       	ret

0000069a <transmit>:
		while(1){}
	}
}


void transmit(u8 * msg, u16 msglen, u16 receiver){
 69a:	cf 92       	push	r12
 69c:	df 92       	push	r13
 69e:	ef 92       	push	r14
 6a0:	ff 92       	push	r15
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	cd b7       	in	r28, 0x3d	; 61
 6ac:	de b7       	in	r29, 0x3e	; 62
 6ae:	28 97       	sbiw	r28, 0x08	; 8
 6b0:	cd bf       	out	0x3d, r28	; 61
 6b2:	de bf       	out	0x3e, r29	; 62
 6b4:	6c 01       	movw	r12, r24
 6b6:	7b 01       	movw	r14, r22
 6b8:	8a 01       	movw	r16, r20
	
	digitalWrite(RFM_SS, 0);
 6ba:	60 91 9b 60 	lds	r22, 0x609B	; 0x80609b <RFM_SS>
 6be:	70 91 9c 60 	lds	r23, 0x609C	; 0x80609c <RFM_SS+0x1>
 6c2:	80 91 9d 60 	lds	r24, 0x609D	; 0x80609d <RFM_SS+0x2>
 6c6:	40 e0       	ldi	r20, 0x00	; 0
 6c8:	0e 94 89 02 	call	0x512	; 0x512 <digitalWrite>
	
	u8 header[HDR_LEN];
	memset(header, 0, HDR_LEN * sizeof(u8));
 6cc:	ae 01       	movw	r20, r28
 6ce:	4f 5f       	subi	r20, 0xFF	; 255
 6d0:	5f 4f       	sbci	r21, 0xFF	; 255
 6d2:	88 e0       	ldi	r24, 0x08	; 8
 6d4:	fa 01       	movw	r30, r20
 6d6:	11 92       	st	Z+, r1
 6d8:	8a 95       	dec	r24
 6da:	e9 f7       	brne	.-6      	; 0x6d6 <transmit+0x3c>
	createHeader(receiver, msglen, header);
 6dc:	b7 01       	movw	r22, r14
 6de:	c8 01       	movw	r24, r16
 6e0:	0e 94 97 02 	call	0x52e	; 0x52e <createHeader>
	
	//Set FIFO to address 0
	
	spiSend(RFM_SPI_READ | 0x00); //Send Address of FIFO
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	0e 94 0c 04 	call	0x818	; 0x818 <spiSend>
	for(u16 i = 0; i < HDR_LEN; i++){
 6ea:	00 e0       	ldi	r16, 0x00	; 0
 6ec:	10 e0       	ldi	r17, 0x00	; 0
 6ee:	0b c0       	rjmp	.+22     	; 0x706 <transmit+0x6c>
		//Write Header to FIFO
		spiSend(header[i]);
 6f0:	e1 e0       	ldi	r30, 0x01	; 1
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	ec 0f       	add	r30, r28
 6f6:	fd 1f       	adc	r31, r29
 6f8:	e0 0f       	add	r30, r16
 6fa:	f1 1f       	adc	r31, r17
 6fc:	80 81       	ld	r24, Z
 6fe:	0e 94 0c 04 	call	0x818	; 0x818 <spiSend>
	createHeader(receiver, msglen, header);
	
	//Set FIFO to address 0
	
	spiSend(RFM_SPI_READ | 0x00); //Send Address of FIFO
	for(u16 i = 0; i < HDR_LEN; i++){
 702:	0f 5f       	subi	r16, 0xFF	; 255
 704:	1f 4f       	sbci	r17, 0xFF	; 255
 706:	08 30       	cpi	r16, 0x08	; 8
 708:	11 05       	cpc	r17, r1
 70a:	90 f3       	brcs	.-28     	; 0x6f0 <transmit+0x56>
 70c:	00 e0       	ldi	r16, 0x00	; 0
 70e:	10 e0       	ldi	r17, 0x00	; 0
 710:	08 c0       	rjmp	.+16     	; 0x722 <transmit+0x88>
		spiSend(header[i]);
	}
	
	for(u16 i = 0; i < msglen; i++){
		//Write Message to FIFO
		spiSend(msg[i]);
 712:	f6 01       	movw	r30, r12
 714:	e0 0f       	add	r30, r16
 716:	f1 1f       	adc	r31, r17
 718:	80 81       	ld	r24, Z
 71a:	0e 94 0c 04 	call	0x818	; 0x818 <spiSend>
	for(u16 i = 0; i < HDR_LEN; i++){
		//Write Header to FIFO
		spiSend(header[i]);
	}
	
	for(u16 i = 0; i < msglen; i++){
 71e:	0f 5f       	subi	r16, 0xFF	; 255
 720:	1f 4f       	sbci	r17, 0xFF	; 255
 722:	0e 15       	cp	r16, r14
 724:	1f 05       	cpc	r17, r15
 726:	a8 f3       	brcs	.-22     	; 0x712 <transmit+0x78>
		//Write Message to FIFO
		spiSend(msg[i]);
	}
	
	//Set DIO config
	rfmSpiSend(REG_DIO_MAPPING1, DIO0_MAPPING1);
 728:	60 e4       	ldi	r22, 0x40	; 64
 72a:	80 e4       	ldi	r24, 0x40	; 64
 72c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <rfmSpiSend>
	
	//Set TX Mode to on and wait for interrupt
	setTXMode();
 730:	0e 94 42 03 	call	0x684	; 0x684 <setTXMode>
	
	//Wait for TXDone Interrupt
	while(!digitalRead(DIO0)){
 734:	60 91 47 60 	lds	r22, 0x6047	; 0x806047 <DIO0>
 738:	70 91 48 60 	lds	r23, 0x6048	; 0x806048 <DIO0+0x1>
 73c:	80 91 49 60 	lds	r24, 0x6049	; 0x806049 <DIO0+0x2>
 740:	0e 94 93 02 	call	0x526	; 0x526 <digitalRead>
 744:	88 23       	and	r24, r24
 746:	b1 f3       	breq	.-20     	; 0x734 <transmit+0x9a>
		
	}
	
	digitalWrite(RFM_SS, 1);
 748:	60 91 9b 60 	lds	r22, 0x609B	; 0x80609b <RFM_SS>
 74c:	70 91 9c 60 	lds	r23, 0x609C	; 0x80609c <RFM_SS+0x1>
 750:	80 91 9d 60 	lds	r24, 0x609D	; 0x80609d <RFM_SS+0x2>
 754:	41 e0       	ldi	r20, 0x01	; 1
 756:	0e 94 89 02 	call	0x512	; 0x512 <digitalWrite>
 75a:	28 96       	adiw	r28, 0x08	; 8
 75c:	cd bf       	out	0x3d, r28	; 61
 75e:	de bf       	out	0x3e, r29	; 62
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	1f 91       	pop	r17
 766:	0f 91       	pop	r16
 768:	ff 90       	pop	r15
 76a:	ef 90       	pop	r14
 76c:	df 90       	pop	r13
 76e:	cf 90       	pop	r12
 770:	08 95       	ret

00000772 <initializeSPI>:
	while((SPI0.INTFLAGS & INTFLAG_DREIF) == 0);
	//SPI0.DATA = 0x00;
	while((SPI0.INTFLAGS & INTFLAG_TXCIF) == 0);
	while((SPI0.INTFLAGS & INTFLAG_RXCIF) == 0);
	return (u8) SPI0.DATA;
}
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7f05e4>
 778:	8d e0       	ldi	r24, 0x0D	; 13
 77a:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <__TEXT_REGION_LENGTH__+0x7f0481>
 77e:	88 e0       	ldi	r24, 0x08	; 8
 780:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <__TEXT_REGION_LENGTH__+0x7f0493>
 784:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7f0485>
 788:	81 e2       	ldi	r24, 0x21	; 33
 78a:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7f0940>
 78e:	80 ee       	ldi	r24, 0xE0	; 224
 790:	80 93 42 09 	sts	0x0942, r24	; 0x800942 <__TEXT_REGION_LENGTH__+0x7f0942>
 794:	8f e6       	ldi	r24, 0x6F	; 111
 796:	97 e1       	ldi	r25, 0x17	; 23
 798:	01 97       	sbiw	r24, 0x01	; 1
 79a:	f1 f7       	brne	.-4      	; 0x798 <initializeSPI+0x26>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <initializeSPI+0x2c>
 79e:	00 00       	nop
 7a0:	08 95       	ret

000007a2 <rfmSpiRecv>:
 7a2:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 7a6:	95 ff       	sbrs	r25, 5
 7a8:	fc cf       	rjmp	.-8      	; 0x7a2 <rfmSpiRecv>
 7aa:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
 7ae:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 7b2:	86 ff       	sbrs	r24, 6
 7b4:	fc cf       	rjmp	.-8      	; 0x7ae <rfmSpiRecv+0xc>
 7b6:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 7ba:	88 23       	and	r24, r24
 7bc:	e4 f7       	brge	.-8      	; 0x7b6 <rfmSpiRecv+0x14>
 7be:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 7c2:	85 ff       	sbrs	r24, 5
 7c4:	fc cf       	rjmp	.-8      	; 0x7be <rfmSpiRecv+0x1c>
 7c6:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 7ca:	86 ff       	sbrs	r24, 6
 7cc:	fc cf       	rjmp	.-8      	; 0x7c6 <rfmSpiRecv+0x24>
 7ce:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 7d2:	88 23       	and	r24, r24
 7d4:	e4 f7       	brge	.-8      	; 0x7ce <rfmSpiRecv+0x2c>
 7d6:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
 7da:	08 95       	ret

000007dc <rfmSpiSend>:

inline void rfmSpiSend(u8 addr, u8 data){
	spiSend(RFM_SPI_WRITE | addr);
 7dc:	80 68       	ori	r24, 0x80	; 128
	spiSend(data);
}

inline void spiSend(u8 data){
	while((SPI0.INTFLAGS & INTFLAG_DREIF) == 0);
 7de:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 7e2:	95 ff       	sbrs	r25, 5
 7e4:	fc cf       	rjmp	.-8      	; 0x7de <rfmSpiSend+0x2>
	SPI0.DATA = data;
 7e6:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
	while((SPI0.INTFLAGS & INTFLAG_TXCIF) == 0);
 7ea:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 7ee:	86 ff       	sbrs	r24, 6
 7f0:	fc cf       	rjmp	.-8      	; 0x7ea <rfmSpiSend+0xe>
	while((SPI0.INTFLAGS & INTFLAG_RXCIF) == 0);
 7f2:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 7f6:	88 23       	and	r24, r24
 7f8:	e4 f7       	brge	.-8      	; 0x7f2 <rfmSpiSend+0x16>
	spiSend(RFM_SPI_WRITE | addr);
	spiSend(data);
}

inline void spiSend(u8 data){
	while((SPI0.INTFLAGS & INTFLAG_DREIF) == 0);
 7fa:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 7fe:	85 ff       	sbrs	r24, 5
 800:	fc cf       	rjmp	.-8      	; 0x7fa <rfmSpiSend+0x1e>
	SPI0.DATA = data;
 802:	60 93 44 09 	sts	0x0944, r22	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
	while((SPI0.INTFLAGS & INTFLAG_TXCIF) == 0);
 806:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 80a:	86 ff       	sbrs	r24, 6
 80c:	fc cf       	rjmp	.-8      	; 0x806 <rfmSpiSend+0x2a>
	while((SPI0.INTFLAGS & INTFLAG_RXCIF) == 0);
 80e:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 812:	88 23       	and	r24, r24
 814:	e4 f7       	brge	.-8      	; 0x80e <rfmSpiSend+0x32>
}

inline void rfmSpiSend(u8 addr, u8 data){
	spiSend(RFM_SPI_WRITE | addr);
	spiSend(data);
}
 816:	08 95       	ret

00000818 <spiSend>:

inline void spiSend(u8 data){
	while((SPI0.INTFLAGS & INTFLAG_DREIF) == 0);
 818:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 81c:	95 ff       	sbrs	r25, 5
 81e:	fc cf       	rjmp	.-8      	; 0x818 <spiSend>
	SPI0.DATA = data;
 820:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7f0944>
	while((SPI0.INTFLAGS & INTFLAG_TXCIF) == 0);
 824:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 828:	86 ff       	sbrs	r24, 6
 82a:	fc cf       	rjmp	.-8      	; 0x824 <spiSend+0xc>
	while((SPI0.INTFLAGS & INTFLAG_RXCIF) == 0);
 82c:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7f0943>
 830:	88 23       	and	r24, r24
 832:	e4 f7       	brge	.-8      	; 0x82c <spiSend+0x14>
}
 834:	08 95       	ret

00000836 <_exit>:
 836:	f8 94       	cli

00000838 <__stop_program>:
 838:	ff cf       	rjmp	.-2      	; 0x838 <__stop_program>
